
Ex2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b4  080038b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038b4  080038b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b4  080038b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  0800392c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800392c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c36d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002071  00000000  00000000  0002c406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001709e  00000000  00000000  0002fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7d5  00000000  00000000  00046dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000865f2  00000000  00000000  000545b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000daba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000dabf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800382c 	.word	0x0800382c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800382c 	.word	0x0800382c

0800014c <display_task>:
#include "display.h"


UART_HandleTypeDef huart2;

void display_task(int idx) {
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b08d      	sub	sp, #52	; 0x34
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	uint32_t time = HAL_GetTick();
 8000154:	f000 feb4 	bl	8000ec0 <HAL_GetTick>
 8000158:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t tmp = time;
 800015a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800015c:	627b      	str	r3, [r7, #36]	; 0x24
	int index = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	62bb      	str	r3, [r7, #40]	; 0x28
	while(tmp > 0) {
 8000162:	e008      	b.n	8000176 <display_task+0x2a>
		index++;
 8000164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000166:	3301      	adds	r3, #1
 8000168:	62bb      	str	r3, [r7, #40]	; 0x28
		tmp /= 10;
 800016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800016c:	4a2a      	ldr	r2, [pc, #168]	; (8000218 <display_task+0xcc>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	08db      	lsrs	r3, r3, #3
 8000174:	627b      	str	r3, [r7, #36]	; 0x24
	while(tmp > 0) {
 8000176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000178:	2b00      	cmp	r3, #0
 800017a:	d1f3      	bne.n	8000164 <display_task+0x18>
	}
	uint8_t msg[index];
 800017c:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800017e:	466b      	mov	r3, sp
 8000180:	461e      	mov	r6, r3
 8000182:	1e6b      	subs	r3, r5, #1
 8000184:	623b      	str	r3, [r7, #32]
 8000186:	462b      	mov	r3, r5
 8000188:	4618      	mov	r0, r3
 800018a:	f04f 0100 	mov.w	r1, #0
 800018e:	f04f 0200 	mov.w	r2, #0
 8000192:	f04f 0300 	mov.w	r3, #0
 8000196:	00cb      	lsls	r3, r1, #3
 8000198:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800019c:	00c2      	lsls	r2, r0, #3
 800019e:	462b      	mov	r3, r5
 80001a0:	4618      	mov	r0, r3
 80001a2:	f04f 0100 	mov.w	r1, #0
 80001a6:	f04f 0200 	mov.w	r2, #0
 80001aa:	f04f 0300 	mov.w	r3, #0
 80001ae:	00cb      	lsls	r3, r1, #3
 80001b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80001b4:	00c2      	lsls	r2, r0, #3
 80001b6:	462b      	mov	r3, r5
 80001b8:	3307      	adds	r3, #7
 80001ba:	08db      	lsrs	r3, r3, #3
 80001bc:	00db      	lsls	r3, r3, #3
 80001be:	ebad 0d03 	sub.w	sp, sp, r3
 80001c2:	466b      	mov	r3, sp
 80001c4:	3300      	adds	r3, #0
 80001c6:	61fb      	str	r3, [r7, #28]
	sprintf(msg, "%ld", time);
 80001c8:	69fb      	ldr	r3, [r7, #28]
 80001ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80001cc:	4913      	ldr	r1, [pc, #76]	; (800021c <display_task+0xd0>)
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fef2 	bl	8002fb8 <siprintf>

	uint8_t task[15] = "ms - Task -\n\r";
 80001d4:	4b12      	ldr	r3, [pc, #72]	; (8000220 <display_task+0xd4>)
 80001d6:	f107 040c 	add.w	r4, r7, #12
 80001da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001dc:	c407      	stmia	r4!, {r0, r1, r2}
 80001de:	8023      	strh	r3, [r4, #0]
 80001e0:	2300      	movs	r3, #0
 80001e2:	76bb      	strb	r3, [r7, #26]
	task[10] = Run_Tasks_G[idx].TaskId + '0';
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <display_task+0xd8>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	4413      	add	r3, r2
 80001ec:	791b      	ldrb	r3, [r3, #4]
 80001ee:	3330      	adds	r3, #48	; 0x30
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	75bb      	strb	r3, [r7, #22]
	HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80001f4:	69f9      	ldr	r1, [r7, #28]
 80001f6:	b2aa      	uxth	r2, r5
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	480b      	ldr	r0, [pc, #44]	; (8000228 <display_task+0xdc>)
 80001fc:	f002 fa1f 	bl	800263e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, task, sizeof(task), 100);
 8000200:	f107 010c 	add.w	r1, r7, #12
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	220f      	movs	r2, #15
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <display_task+0xdc>)
 800020a:	f002 fa18 	bl	800263e <HAL_UART_Transmit>
 800020e:	46b5      	mov	sp, r6

}
 8000210:	bf00      	nop
 8000212:	3734      	adds	r7, #52	; 0x34
 8000214:	46bd      	mov	sp, r7
 8000216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000218:	cccccccd 	.word	0xcccccccd
 800021c:	08003844 	.word	0x08003844
 8000220:	08003848 	.word	0x08003848
 8000224:	20000108 	.word	0x20000108
 8000228:	20000158 	.word	0x20000158

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000230:	f000 fdee 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000234:	f000 f834 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000238:	f000 f8e4 	bl	8000404 <MX_GPIO_Init>
  MX_TIM2_Init();
 800023c:	f000 f86c 	bl	8000318 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f8b6 	bl	80003b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8000244:	f000 f93c 	bl	80004c0 <SCH_Init>
    SCH_Add_Task(&task1, 1, 100);
 8000248:	2264      	movs	r2, #100	; 0x64
 800024a:	2101      	movs	r1, #1
 800024c:	480e      	ldr	r0, [pc, #56]	; (8000288 <main+0x5c>)
 800024e:	f000 f9df 	bl	8000610 <SCH_Add_Task>
    SCH_Add_Task(&task2, 3, 200);
 8000252:	22c8      	movs	r2, #200	; 0xc8
 8000254:	2103      	movs	r1, #3
 8000256:	480d      	ldr	r0, [pc, #52]	; (800028c <main+0x60>)
 8000258:	f000 f9da 	bl	8000610 <SCH_Add_Task>
    SCH_Add_Task(&task3, 5, 100);
 800025c:	2264      	movs	r2, #100	; 0x64
 800025e:	2105      	movs	r1, #5
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x64>)
 8000262:	f000 f9d5 	bl	8000610 <SCH_Add_Task>
    SCH_Add_Task(&task4, 2, 500);
 8000266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800026a:	2102      	movs	r1, #2
 800026c:	4809      	ldr	r0, [pc, #36]	; (8000294 <main+0x68>)
 800026e:	f000 f9cf 	bl	8000610 <SCH_Add_Task>
    SCH_Add_Task(&task5, 6, 250);
 8000272:	22fa      	movs	r2, #250	; 0xfa
 8000274:	2106      	movs	r1, #6
 8000276:	4808      	ldr	r0, [pc, #32]	; (8000298 <main+0x6c>)
 8000278:	f000 f9ca 	bl	8000610 <SCH_Add_Task>
    HAL_TIM_Base_Start_IT(&htim2);
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <main+0x70>)
 800027e:	f001 fdfd 	bl	8001e7c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000282:	f000 f971 	bl	8000568 <SCH_Dispatch_Tasks>
 8000286:	e7fc      	b.n	8000282 <main+0x56>
 8000288:	08000d61 	.word	0x08000d61
 800028c:	08000d75 	.word	0x08000d75
 8000290:	08000d89 	.word	0x08000d89
 8000294:	08000d9d 	.word	0x08000d9d
 8000298:	08000db1 	.word	0x08000db1
 800029c:	2000019c 	.word	0x2000019c

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fe7a 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f966 	bl	80015a8 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f8e8 	bl	80004b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fbd2 	bl	8001aa8 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f8d4 	bl	80004b6 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <MX_TIM2_Init+0x94>)
 8000336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800033a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_TIM2_Init+0x94>)
 800033e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b19      	ldr	r3, [pc, #100]	; (80003ac <MX_TIM2_Init+0x94>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_TIM2_Init+0x94>)
 800034c:	220a      	movs	r2, #10
 800034e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <MX_TIM2_Init+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_TIM2_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <MX_TIM2_Init+0x94>)
 800035e:	f001 fd3d 	bl	8001ddc <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000368:	f000 f8a5 	bl	80004b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4619      	mov	r1, r3
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <MX_TIM2_Init+0x94>)
 800037a:	f001 fed3 	bl	8002124 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000384:	f000 f897 	bl	80004b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000388:	2300      	movs	r3, #0
 800038a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	4619      	mov	r1, r3
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <MX_TIM2_Init+0x94>)
 8000396:	f002 f89b 	bl	80024d0 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a0:	f000 f889 	bl	80004b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000019c 	.word	0x2000019c

080003b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_USART2_UART_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x4c>)
 80003e8:	f002 f8dc 	bl	80025a4 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003f2:	f000 f860 	bl	80004b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000158 	.word	0x20000158
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_GPIO_Init+0x8c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_GPIO_Init+0x8c>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_GPIO_Init+0x8c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_GPIO_Init+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a16      	ldr	r2, [pc, #88]	; (8000490 <MX_GPIO_Init+0x8c>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_GPIO_Init+0x8c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_GPIO_Init+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <MX_GPIO_Init+0x8c>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_GPIO_Init+0x8c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000460:	2200      	movs	r2, #0
 8000462:	211f      	movs	r1, #31
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <MX_GPIO_Init+0x90>)
 8000466:	f001 f86d 	bl	8001544 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800046a:	231f      	movs	r3, #31
 800046c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2302      	movs	r3, #2
 8000478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_GPIO_Init+0x90>)
 8000482:	f000 fee5 	bl	8001250 <HAL_GPIO_Init>

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	40010c00 	.word	0x40010c00

08000498 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004a8:	d101      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 80004aa:	f000 f83f 	bl	800052c <SCH_Update>
	}
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ba:	b672      	cpsid	i
}
 80004bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004be:	e7fe      	b.n	80004be <Error_Handler+0x8>

080004c0 <SCH_Init>:
};

static uint8_t count, count_run, TASKID;
static uint32_t RUNME;

void SCH_Init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	int i = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
	while(i < SCH_MAX_TASKS && i < MAX_QUEUE) {
 80004ca:	e008      	b.n	80004de <SCH_Init+0x1e>
		SCH_Delete_Task(i);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f994 	bl	80007fc <SCH_Delete_Task>
		pop();
 80004d4:	f000 fa3c 	bl	8000950 <pop>
		i++;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	607b      	str	r3, [r7, #4]
	while(i < SCH_MAX_TASKS && i < MAX_QUEUE) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	dc02      	bgt.n	80004ea <SCH_Init+0x2a>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	ddf0      	ble.n	80004cc <SCH_Init+0xc>
	}
	// Reset the global error variable
	// − SCH_Delete_Task () will generate an error code ,
	// ( because the task array is empty)

	count = 0;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <SCH_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
	count_run = 0;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <SCH_Init+0x5c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
	RUNME = 0;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <SCH_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
	TASKID = 0;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <SCH_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]

	Error_code_G = FREE_OF_ERROR;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <SCH_Init+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
	Timer_Init();
 8000508:	f000 fa4a 	bl	80009a0 <Timer_Init>
	Watchdog_Init();
 800050c:	f000 fa4e 	bl	80009ac <Watchdog_Init>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000008c 	.word	0x2000008c
 800051c:	2000008d 	.word	0x2000008d
 8000520:	20000090 	.word	0x20000090
 8000524:	2000008e 	.word	0x2000008e
 8000528:	200000a0 	.word	0x200000a0

0800052c <SCH_Update>:
void SCH_Update(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].pTask) {
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <SCH_Update+0x38>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d011      	beq.n	800055c <SCH_Update+0x30>
		if(SCH_tasks_G[0].Delay > 0) {
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <SCH_Update+0x38>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d004      	beq.n	800054a <SCH_Update+0x1e>
			SCH_tasks_G[0].Delay--;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <SCH_Update+0x38>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	3b01      	subs	r3, #1
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <SCH_Update+0x38>)
 8000548:	6053      	str	r3, [r2, #4]
		}
		if(SCH_tasks_G[0].Delay == 0) {
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SCH_Update+0x38>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d104      	bne.n	800055c <SCH_Update+0x30>
			SCH_tasks_G[0].RunMe++;
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <SCH_Update+0x38>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	4a02      	ldr	r2, [pc, #8]	; (8000564 <SCH_Update+0x38>)
 800055a:	60d3      	str	r3, [r2, #12]
		}
	}
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	200000a4 	.word	0x200000a4

08000568 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(){
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
	if(SCH_tasks_G[0].pTask && SCH_tasks_G[0].Delay == 0 && SCH_tasks_G[0].RunMe > 0) {
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d031      	beq.n	80005da <SCH_Dispatch_Tasks+0x72>
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d12d      	bne.n	80005da <SCH_Dispatch_Tasks+0x72>
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 8000580:	68db      	ldr	r3, [r3, #12]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d029      	beq.n	80005da <SCH_Dispatch_Tasks+0x72>
		push(SCH_tasks_G[0]);
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 8000588:	691a      	ldr	r2, [r3, #16]
 800058a:	9200      	str	r2, [sp, #0]
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	f000 f9b3 	bl	80008f8 <push>
		SCH_tasks_G[0].RunMe--;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	3b01      	subs	r3, #1
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 800059a:	60d3      	str	r3, [r2, #12]
		if(SCH_tasks_G[0].Period > 0) {
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d017      	beq.n	80005d4 <SCH_Dispatch_Tasks+0x6c>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Period;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	4a16      	ldr	r2, [pc, #88]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 80005aa:	6053      	str	r3, [r2, #4]
			sTask tmp = SCH_tasks_G[0];
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <SCH_Dispatch_Tasks+0x9c>)
 80005ae:	1d3c      	adds	r4, r7, #4
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	6023      	str	r3, [r4, #0]
			RUNME = tmp.RunMe;
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <SCH_Dispatch_Tasks+0xa0>)
 80005be:	6013      	str	r3, [r2, #0]
			SCH_Delete_Task(0);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 f91b 	bl	80007fc <SCH_Delete_Task>
			SCH_Add_Task(tmp.pTask, tmp.Delay, tmp.Period);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f81f 	bl	8000610 <SCH_Add_Task>
 80005d2:	e002      	b.n	80005da <SCH_Dispatch_Tasks+0x72>
		}
		else {
			SCH_Delete_Task(0);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f911 	bl	80007fc <SCH_Delete_Task>
		}
	}
	if(Run_Tasks_G[0].pTask) {
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <SCH_Dispatch_Tasks+0xa4>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d007      	beq.n	80005f2 <SCH_Dispatch_Tasks+0x8a>
		display_task(0);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff fdb2 	bl	800014c <display_task>
		(*Run_Tasks_G[0].pTask)();
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCH_Dispatch_Tasks+0xa4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4798      	blx	r3
		pop();
 80005ee:	f000 f9af 	bl	8000950 <pop>
	}
	// Report system status
	SCH_Report_Status();
 80005f2:	f000 f9e1 	bl	80009b8 <SCH_Report_Status>
	// The scheduler enters idle mode at this point
	SCH_Go_To_Sleep();
 80005f6:	f000 f9e5 	bl	80009c4 <SCH_Go_To_Sleep>
}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bdb0      	pop	{r4, r5, r7, pc}
 8000602:	bf00      	nop
 8000604:	200000a4 	.word	0x200000a4
 8000608:	20000090 	.word	0x20000090
 800060c:	20000108 	.word	0x20000108

08000610 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (*pfunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	if(count == SCH_MAX_TASKS) {
 800061c:	4b72      	ldr	r3, [pc, #456]	; (80007e8 <SCH_Add_Task+0x1d8>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d104      	bne.n	800062e <SCH_Add_Task+0x1e>
		Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000624:	4b71      	ldr	r3, [pc, #452]	; (80007ec <SCH_Add_Task+0x1dc>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
		return SCH_MAX_TASKS;
 800062a:	2305      	movs	r3, #5
 800062c:	e0d8      	b.n	80007e0 <SCH_Add_Task+0x1d0>
	}
	int Index = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
	int Slot = -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	61bb      	str	r3, [r7, #24]
	uint32_t Delay_RT = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
	uint32_t tmp = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
	while(Index < count){
 8000640:	e01b      	b.n	800067a <SCH_Add_Task+0x6a>
		if(Slot == -1) {
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000648:	d10d      	bne.n	8000666 <SCH_Add_Task+0x56>
			tmp = Delay_RT;
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	613b      	str	r3, [r7, #16]
			Delay_RT += SCH_tasks_G[Index].Delay;
 800064e:	4968      	ldr	r1, [pc, #416]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000650:	69fa      	ldr	r2, [r7, #28]
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	3304      	adds	r3, #4
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	617b      	str	r3, [r7, #20]
		}
		if(Delay_RT > DELAY) {
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	429a      	cmp	r2, r3
 800066c:	d902      	bls.n	8000674 <SCH_Add_Task+0x64>
			Slot = Index;
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	61bb      	str	r3, [r7, #24]
			break;
 8000672:	e008      	b.n	8000686 <SCH_Add_Task+0x76>
		}
		Index++;
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3301      	adds	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
	while(Index < count){
 800067a:	4b5b      	ldr	r3, [pc, #364]	; (80007e8 <SCH_Add_Task+0x1d8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	4293      	cmp	r3, r2
 8000684:	dbdd      	blt.n	8000642 <SCH_Add_Task+0x32>
	}
	count++;
 8000686:	4b58      	ldr	r3, [pc, #352]	; (80007e8 <SCH_Add_Task+0x1d8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <SCH_Add_Task+0x1d8>)
 8000690:	701a      	strb	r2, [r3, #0]
	if(Slot == -1) {
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d13c      	bne.n	8000714 <SCH_Add_Task+0x104>
		SCH_tasks_G[Index].pTask = pfunction;
 800069a:	4955      	ldr	r1, [pc, #340]	; (80007f0 <SCH_Add_Task+0x1e0>)
 800069c:	69fa      	ldr	r2, [r7, #28]
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Delay = DELAY - Delay_RT;
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	1ad1      	subs	r1, r2, r3
 80006b2:	484f      	ldr	r0, [pc, #316]	; (80007f0 <SCH_Add_Task+0x1e0>)
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4403      	add	r3, r0
 80006c0:	3304      	adds	r3, #4
 80006c2:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD;
 80006c4:	494a      	ldr	r1, [pc, #296]	; (80007f0 <SCH_Add_Task+0x1e0>)
 80006c6:	69fa      	ldr	r2, [r7, #28]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	3308      	adds	r3, #8
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].RunMe = RUNME;
 80006d8:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <SCH_Add_Task+0x1e4>)
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	4844      	ldr	r0, [pc, #272]	; (80007f0 <SCH_Add_Task+0x1e0>)
 80006de:	69fa      	ldr	r2, [r7, #28]
 80006e0:	4613      	mov	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4403      	add	r3, r0
 80006ea:	330c      	adds	r3, #12
 80006ec:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].TaskId = (TASKID != 0)? TASKID : count;
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <SCH_Add_Task+0x1e8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <SCH_Add_Task+0xec>
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <SCH_Add_Task+0x1e8>)
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	e001      	b.n	8000700 <SCH_Add_Task+0xf0>
 80006fc:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <SCH_Add_Task+0x1d8>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	483b      	ldr	r0, [pc, #236]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000702:	69f9      	ldr	r1, [r7, #28]
 8000704:	460b      	mov	r3, r1
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	440b      	add	r3, r1
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4403      	add	r3, r0
 800070e:	3310      	adds	r3, #16
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e05e      	b.n	80007d2 <SCH_Add_Task+0x1c2>
	}
	else {
		SCH_Shift_End_Tasks(Slot, STASK);
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f959 	bl	80009d0 <SCH_Shift_End_Tasks>
//		add task
		SCH_tasks_G[Slot].pTask = pfunction;
 800071e:	4934      	ldr	r1, [pc, #208]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	4613      	mov	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	440b      	add	r3, r1
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Slot].Delay = DELAY - tmp;
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	1ad1      	subs	r1, r2, r3
 8000736:	482e      	ldr	r0, [pc, #184]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4403      	add	r3, r0
 8000744:	3304      	adds	r3, #4
 8000746:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Slot].Period = PERIOD;
 8000748:	4929      	ldr	r1, [pc, #164]	; (80007f0 <SCH_Add_Task+0x1e0>)
 800074a:	69ba      	ldr	r2, [r7, #24]
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	3308      	adds	r3, #8
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Slot].RunMe = RUNME;
 800075c:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <SCH_Add_Task+0x1e4>)
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4823      	ldr	r0, [pc, #140]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	4613      	mov	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4403      	add	r3, r0
 800076e:	330c      	adds	r3, #12
 8000770:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Slot].TaskId = (TASKID != 0)? TASKID : count;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <SCH_Add_Task+0x1e8>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <SCH_Add_Task+0x170>
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SCH_Add_Task+0x1e8>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	e001      	b.n	8000784 <SCH_Add_Task+0x174>
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <SCH_Add_Task+0x1d8>)
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	481a      	ldr	r0, [pc, #104]	; (80007f0 <SCH_Add_Task+0x1e0>)
 8000786:	69b9      	ldr	r1, [r7, #24]
 8000788:	460b      	mov	r3, r1
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	440b      	add	r3, r1
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4403      	add	r3, r0
 8000792:	3310      	adds	r3, #16
 8000794:	701a      	strb	r2, [r3, #0]
//		tinh toan lai delay cua slot+1
		SCH_tasks_G[Slot + 1].Delay -= SCH_tasks_G[Slot].Delay;
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4915      	ldr	r1, [pc, #84]	; (80007f0 <SCH_Add_Task+0x1e0>)
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	440b      	add	r3, r1
 80007a6:	3304      	adds	r3, #4
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	4811      	ldr	r0, [pc, #68]	; (80007f0 <SCH_Add_Task+0x1e0>)
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4403      	add	r3, r0
 80007b8:	3304      	adds	r3, #4
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	3201      	adds	r2, #1
 80007c0:	1ac9      	subs	r1, r1, r3
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <SCH_Add_Task+0x1e0>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4403      	add	r3, r0
 80007ce:	3304      	adds	r3, #4
 80007d0:	6019      	str	r1, [r3, #0]
	}
	RUNME = 0;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <SCH_Add_Task+0x1e4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
	TASKID = 0;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <SCH_Add_Task+0x1e8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]

	return Index;
 80007de:	69fb      	ldr	r3, [r7, #28]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	200000a0 	.word	0x200000a0
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	20000090 	.word	0x20000090
 80007f8:	2000008e 	.word	0x2000008e

080007fc <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t taskID){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	unsigned char Code_State;
	if(!SCH_tasks_G[taskID].pTask){
 8000804:	4938      	ldr	r1, [pc, #224]	; (80008e8 <SCH_Delete_Task+0xec>)
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d105      	bne.n	8000824 <SCH_Delete_Task+0x28>
		//No task at this location
		//Set the global error variable
		Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <SCH_Delete_Task+0xf0>)
 800081a:	2208      	movs	r2, #8
 800081c:	601a      	str	r2, [r3, #0]
		Code_State = _ERROR_;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e05c      	b.n	80008de <SCH_Delete_Task+0xe2>
	}
	else{
		Code_State = _SUCCESS_;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
		if(SCH_tasks_G[taskID].Period > 0) {
 8000828:	492f      	ldr	r1, [pc, #188]	; (80008e8 <SCH_Delete_Task+0xec>)
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	3308      	adds	r3, #8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <SCH_Delete_Task+0x58>
			TASKID = SCH_tasks_G[taskID].TaskId;
 800083e:	492a      	ldr	r1, [pc, #168]	; (80008e8 <SCH_Delete_Task+0xec>)
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	3310      	adds	r3, #16
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <SCH_Delete_Task+0xf4>)
 8000852:	701a      	strb	r2, [r3, #0]
		}
		SCH_Shift_Start_Tasks(taskID, STASK);
 8000854:	2100      	movs	r1, #0
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f90e 	bl	8000a78 <SCH_Shift_Start_Tasks>
		SCH_tasks_G[count-1].pTask = 0x0000;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <SCH_Delete_Task+0xf8>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	4921      	ldr	r1, [pc, #132]	; (80008e8 <SCH_Delete_Task+0xec>)
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[count-1].Delay = 0;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SCH_Delete_Task+0xf8>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	491b      	ldr	r1, [pc, #108]	; (80008e8 <SCH_Delete_Task+0xec>)
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	440b      	add	r3, r1
 8000884:	3304      	adds	r3, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[count-1].Period = 0;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <SCH_Delete_Task+0xf8>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	1e5a      	subs	r2, r3, #1
 8000890:	4915      	ldr	r1, [pc, #84]	; (80008e8 <SCH_Delete_Task+0xec>)
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	440b      	add	r3, r1
 800089c:	3308      	adds	r3, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[count-1].RunMe = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <SCH_Delete_Task+0xf8>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	490f      	ldr	r1, [pc, #60]	; (80008e8 <SCH_Delete_Task+0xec>)
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	330c      	adds	r3, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[count-1].TaskId = 0;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <SCH_Delete_Task+0xf8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	4909      	ldr	r1, [pc, #36]	; (80008e8 <SCH_Delete_Task+0xec>)
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	3310      	adds	r3, #16
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		count--;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <SCH_Delete_Task+0xf8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SCH_Delete_Task+0xf8>)
 80008dc:	701a      	strb	r2, [r3, #0]
	}
	return Code_State;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000a4 	.word	0x200000a4
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	2000008e 	.word	0x2000008e
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <push>:


uint32_t push(sTask task) {
 80008f8:	b084      	sub	sp, #16
 80008fa:	b490      	push	{r4, r7}
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	f107 0408 	add.w	r4, r7, #8
 8000902:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(count_run == MAX_QUEUE) return 0;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <push+0x50>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d101      	bne.n	8000912 <push+0x1a>
 800090e:	2300      	movs	r3, #0
 8000910:	e015      	b.n	800093e <push+0x46>
	Run_Tasks_G[count_run].pTask = task.pTask;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <push+0x50>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <push+0x54>)
 800091c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	Run_Tasks_G[count_run].TaskId = task.TaskId;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <push+0x50>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	7e39      	ldrb	r1, [r7, #24]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <push+0x54>)
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	4413      	add	r3, r2
 800092c:	460a      	mov	r2, r1
 800092e:	711a      	strb	r2, [r3, #4]
	count_run++;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <push+0x50>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <push+0x50>)
 800093a:	701a      	strb	r2, [r3, #0]
	return 1;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	bc90      	pop	{r4, r7}
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr
 8000948:	2000008d 	.word	0x2000008d
 800094c:	20000108 	.word	0x20000108

08000950 <pop>:
uint8_t pop() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if(count_run == 0) return 0;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <pop+0x48>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <pop+0x10>
 800095c:	2300      	movs	r3, #0
 800095e:	e019      	b.n	8000994 <pop+0x44>
	SCH_Shift_Start_Tasks(0, QTASK);
 8000960:	2101      	movs	r1, #1
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f888 	bl	8000a78 <SCH_Shift_Start_Tasks>
	Run_Tasks_G[count_run - 1].pTask = 0x0000;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <pop+0x48>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	3b01      	subs	r3, #1
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <pop+0x4c>)
 8000970:	2100      	movs	r1, #0
 8000972:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	Run_Tasks_G[count_run - 1].TaskId = 0;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <pop+0x48>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <pop+0x4c>)
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4413      	add	r3, r2
 8000982:	2200      	movs	r2, #0
 8000984:	711a      	strb	r2, [r3, #4]
	count_run--;
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <pop+0x48>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	3b01      	subs	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b02      	ldr	r3, [pc, #8]	; (8000998 <pop+0x48>)
 8000990:	701a      	strb	r2, [r3, #0]
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000008d 	.word	0x2000008d
 800099c:	20000108 	.word	0x20000108

080009a0 <Timer_Init>:



void Timer_Init(){
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Watchdog_Init>:
void Watchdog_Init(){
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SCH_Report_Status>:
void SCH_Report_Status(){
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
#ifdef SCH_REPORT_ERRORS

#define Error_Port GPIOA
#endif
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SCH_Go_To_Sleep>:
void SCH_Go_To_Sleep(){
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <SCH_Shift_End_Tasks>:

void SCH_Shift_End_Tasks(uint32_t Index, int typeArr) {
 80009d0:	b4b0      	push	{r4, r5, r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	if(typeArr == STASK) {
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d121      	bne.n	8000a24 <SCH_Shift_End_Tasks+0x54>
		for(int i = count - 1; i > Index; i--) {
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <SCH_Shift_End_Tasks+0x98>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e017      	b.n	8000a1a <SCH_Shift_End_Tasks+0x4a>
			SCH_tasks_G[i] = SCH_tasks_G[i-1];
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	481f      	ldr	r0, [pc, #124]	; (8000a6c <SCH_Shift_End_Tasks+0x9c>)
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	460b      	mov	r3, r1
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	440b      	add	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4418      	add	r0, r3
 80009fc:	491b      	ldr	r1, [pc, #108]	; (8000a6c <SCH_Shift_End_Tasks+0x9c>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	4604      	mov	r4, r0
 8000a0a:	461d      	mov	r5, r3
 8000a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	6023      	str	r3, [r4, #0]
		for(int i = count - 1; i > Index; i--) {
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3e3      	bcc.n	80009ea <SCH_Shift_End_Tasks+0x1a>
	else if(typeArr == QTASK) {
		for(int i = count_run - 1; i > Index; i--) {
			Run_Tasks_G[i] = Run_Tasks_G[i-1];
		}
	}
}
 8000a22:	e01b      	b.n	8000a5c <SCH_Shift_End_Tasks+0x8c>
	else if(typeArr == QTASK) {
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d118      	bne.n	8000a5c <SCH_Shift_End_Tasks+0x8c>
		for(int i = count_run - 1; i > Index; i--) {
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <SCH_Shift_End_Tasks+0xa0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	e00f      	b.n	8000a54 <SCH_Shift_End_Tasks+0x84>
			Run_Tasks_G[i] = Run_Tasks_G[i-1];
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <SCH_Shift_End_Tasks+0xa4>)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	490d      	ldr	r1, [pc, #52]	; (8000a74 <SCH_Shift_End_Tasks+0xa4>)
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4403      	add	r3, r0
 8000a42:	00d2      	lsls	r2, r2, #3
 8000a44:	440a      	add	r2, r1
 8000a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4a:	e883 0003 	stmia.w	r3, {r0, r1}
		for(int i = count_run - 1; i > Index; i--) {
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3eb      	bcc.n	8000a34 <SCH_Shift_End_Tasks+0x64>
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bcb0      	pop	{r4, r5, r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	2000008c 	.word	0x2000008c
 8000a6c:	200000a4 	.word	0x200000a4
 8000a70:	2000008d 	.word	0x2000008d
 8000a74:	20000108 	.word	0x20000108

08000a78 <SCH_Shift_Start_Tasks>:
void SCH_Shift_Start_Tasks(uint32_t Index, int typeArr) {
 8000a78:	b4b0      	push	{r4, r5, r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	if(typeArr == STASK) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d121      	bne.n	8000acc <SCH_Shift_Start_Tasks+0x54>
		for(int i = Index; i < count-1; i++) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e017      	b.n	8000abe <SCH_Shift_Start_Tasks+0x46>
			SCH_tasks_G[i] = SCH_tasks_G[i+1];
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	481f      	ldr	r0, [pc, #124]	; (8000b10 <SCH_Shift_Start_Tasks+0x98>)
 8000a94:	68f9      	ldr	r1, [r7, #12]
 8000a96:	460b      	mov	r3, r1
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4418      	add	r0, r3
 8000aa0:	491b      	ldr	r1, [pc, #108]	; (8000b10 <SCH_Shift_Start_Tasks+0x98>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	682b      	ldr	r3, [r5, #0]
 8000ab6:	6023      	str	r3, [r4, #0]
		for(int i = Index; i < count-1; i++) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <SCH_Shift_Start_Tasks+0x9c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbe1      	blt.n	8000a8e <SCH_Shift_Start_Tasks+0x16>
	else if(typeArr == QTASK) {
		for(int i = Index; i < count_run-1; i++) {
			Run_Tasks_G[i] = Run_Tasks_G[i+1];
		}
	}
}
 8000aca:	e01b      	b.n	8000b04 <SCH_Shift_Start_Tasks+0x8c>
	else if(typeArr == QTASK) {
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d118      	bne.n	8000b04 <SCH_Shift_Start_Tasks+0x8c>
		for(int i = Index; i < count_run-1; i++) {
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	e00f      	b.n	8000af8 <SCH_Shift_Start_Tasks+0x80>
			Run_Tasks_G[i] = Run_Tasks_G[i+1];
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <SCH_Shift_Start_Tasks+0xa0>)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	490d      	ldr	r1, [pc, #52]	; (8000b18 <SCH_Shift_Start_Tasks+0xa0>)
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4403      	add	r3, r0
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	440a      	add	r2, r1
 8000aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aee:	e883 0003 	stmia.w	r3, {r0, r1}
		for(int i = Index; i < count_run-1; i++) {
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SCH_Shift_Start_Tasks+0xa4>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbe9      	blt.n	8000ad8 <SCH_Shift_Start_Tasks+0x60>
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bcb0      	pop	{r4, r5, r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000a4 	.word	0x200000a4
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	20000108 	.word	0x20000108
 8000b1c:	2000008d 	.word	0x2000008d

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_MspInit+0x5c>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_MspInit+0x60>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_MspInit+0x60>)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010000 	.word	0x40010000

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b94:	d113      	bne.n	8000bbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_TIM_Base_MspInit+0x44>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	201c      	movs	r0, #28
 8000bb4:	f000 fa65 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f000 fa7e 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d137      	bne.n	8000c5c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf6:	61d3      	str	r3, [r2, #28]
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <HAL_UART_MspInit+0xa0>)
 8000c30:	f000 fb0e 	bl	8001250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c34:	2308      	movs	r3, #8
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UART_MspInit+0xa0>)
 8000c48:	f000 fb02 	bl	8001250 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2026      	movs	r0, #38	; 0x26
 8000c52:	f000 fa16 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c56:	2026      	movs	r0, #38	; 0x26
 8000c58:	f000 fa2f 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010800 	.word	0x40010800

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8f1 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM2_IRQHandler+0x10>)
 8000cc6:	f001 f925 	bl	8001f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000019c 	.word	0x2000019c

08000cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <USART2_IRQHandler+0x10>)
 8000cda:	f001 fd43 	bl	8002764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000158 	.word	0x20000158

08000ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf0:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d18:	f002 f91c 	bl	8002f54 <__errno>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	220c      	movs	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	e009      	b.n	8000d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <_sbrk+0x64>)
 8000d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20002800 	.word	0x20002800
 8000d48:	00000400 	.word	0x00000400
 8000d4c:	20000094 	.word	0x20000094
 8000d50:	200001f8 	.word	0x200001f8

08000d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <task1>:


#include "main.h"
#include "task.h"

void task1() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000d64:	2101      	movs	r1, #1
 8000d66:	4802      	ldr	r0, [pc, #8]	; (8000d70 <task1+0x10>)
 8000d68:	f000 fc04 	bl	8001574 <HAL_GPIO_TogglePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <task2>:
void task2() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4802      	ldr	r0, [pc, #8]	; (8000d84 <task2+0x10>)
 8000d7c:	f000 fbfa 	bl	8001574 <HAL_GPIO_TogglePin>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <task3>:
void task3() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <task3+0x10>)
 8000d90:	f000 fbf0 	bl	8001574 <HAL_GPIO_TogglePin>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40010c00 	.word	0x40010c00

08000d9c <task4>:
void task4() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000da0:	2108      	movs	r1, #8
 8000da2:	4802      	ldr	r0, [pc, #8]	; (8000dac <task4+0x10>)
 8000da4:	f000 fbe6 	bl	8001574 <HAL_GPIO_TogglePin>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <task5>:
void task5() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000db4:	2110      	movs	r1, #16
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <task5+0x10>)
 8000db8:	f000 fbdc 	bl	8001574 <HAL_GPIO_TogglePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dea:	f7ff ffb3 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f002 f8b7 	bl	8002f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fa1b 	bl	800022c <main>
  bx lr
 8000df6:	4770      	bx	lr
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e00:	080038bc 	.word	0x080038bc
  ldr r2, =_sbss
 8000e04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e08:	200001f8 	.word	0x200001f8

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_Init+0x28>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f923 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fe78 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f93b 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f903 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001e4 	.word	0x200001e4

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	; (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	200001e4 	.word	0x200001e4

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff90 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff2d 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff42 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff35 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001100:	2b02      	cmp	r3, #2
 8001102:	d008      	beq.n	8001116 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2204      	movs	r2, #4
 8001108:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e020      	b.n	8001158 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 020e 	bic.w	r2, r2, #14
 8001124:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0201 	bic.w	r2, r2, #1
 8001134:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	2b02      	cmp	r3, #2
 8001178:	d005      	beq.n	8001186 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2204      	movs	r2, #4
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e051      	b.n	800122a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 020e 	bic.w	r2, r2, #14
 8001194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <HAL_DMA_Abort_IT+0xd0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d029      	beq.n	8001204 <HAL_DMA_Abort_IT+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_DMA_Abort_IT+0xd4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_Abort_IT+0x9c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_DMA_Abort_IT+0xd8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d01a      	beq.n	80011fa <HAL_DMA_Abort_IT+0x96>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_DMA_Abort_IT+0xdc>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d012      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x90>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_DMA_Abort_IT+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00a      	beq.n	80011ee <HAL_DMA_Abort_IT+0x8a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_DMA_Abort_IT+0xe4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d102      	bne.n	80011e8 <HAL_DMA_Abort_IT+0x84>
 80011e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e6:	e00e      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ec:	e00b      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f2:	e008      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	e002      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001200:	2310      	movs	r3, #16
 8001202:	e000      	b.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 8001204:	2301      	movs	r3, #1
 8001206:	4a11      	ldr	r2, [pc, #68]	; (800124c <HAL_DMA_Abort_IT+0xe8>)
 8001208:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    } 
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020008 	.word	0x40020008
 8001238:	4002001c 	.word	0x4002001c
 800123c:	40020030 	.word	0x40020030
 8001240:	40020044 	.word	0x40020044
 8001244:	40020058 	.word	0x40020058
 8001248:	4002006c 	.word	0x4002006c
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e148      	b.n	80014f6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8137 	bne.w	80014f0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4aa3      	ldr	r2, [pc, #652]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d05e      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 800128c:	4aa1      	ldr	r2, [pc, #644]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d875      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 8001292:	4aa1      	ldr	r2, [pc, #644]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d058      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 8001298:	4a9f      	ldr	r2, [pc, #636]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d86f      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 800129e:	4a9f      	ldr	r2, [pc, #636]	; (800151c <HAL_GPIO_Init+0x2cc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d052      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012a4:	4a9d      	ldr	r2, [pc, #628]	; (800151c <HAL_GPIO_Init+0x2cc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d869      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012aa:	4a9d      	ldr	r2, [pc, #628]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d04c      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012b0:	4a9b      	ldr	r2, [pc, #620]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d863      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012b6:	4a9b      	ldr	r2, [pc, #620]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d046      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012bc:	4a99      	ldr	r2, [pc, #612]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d85d      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d82a      	bhi.n	800131c <HAL_GPIO_Init+0xcc>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d859      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_Init+0x80>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001337 	.word	0x08001337
 80012dc:	08001379 	.word	0x08001379
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	0800137f 	.word	0x0800137f
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	0800137f 	.word	0x0800137f
 8001300:	0800137f 	.word	0x0800137f
 8001304:	0800137f 	.word	0x0800137f
 8001308:	0800137f 	.word	0x0800137f
 800130c:	0800137f 	.word	0x0800137f
 8001310:	0800137f 	.word	0x0800137f
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	4a82      	ldr	r2, [pc, #520]	; (8001528 <HAL_GPIO_Init+0x2d8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e029      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e024      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01f      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e01a      	b.n	8001380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e013      	b.n	8001380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e009      	b.n	8001380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e003      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x130>
          break;
 800137e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d801      	bhi.n	800138a <HAL_GPIO_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <HAL_GPIO_Init+0x13e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d802      	bhi.n	800139c <HAL_GPIO_Init+0x14c>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x152>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3b08      	subs	r3, #8
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	210f      	movs	r1, #15
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	6a39      	ldr	r1, [r7, #32]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8090 	beq.w	80014f0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d0:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a55      	ldr	r2, [pc, #340]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x2e0>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_GPIO_Init+0x2e4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1e0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2e8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2ec>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1d8>
 8001424:	2302      	movs	r3, #2
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001428:	2303      	movs	r3, #3
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	493b      	ldr	r1, [pc, #236]	; (8001530 <HAL_GPIO_Init+0x2e0>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800145c:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4937      	ldr	r1, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4933      	ldr	r1, [pc, #204]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001474:	4013      	ands	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	4929      	ldr	r1, [pc, #164]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800149c:	4013      	ands	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	4923      	ldr	r1, [pc, #140]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	491f      	ldr	r1, [pc, #124]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	4919      	ldr	r1, [pc, #100]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4915      	ldr	r1, [pc, #84]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3301      	adds	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f aeaf 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10320000 	.word	0x10320000
 8001518:	10310000 	.word	0x10310000
 800151c:	10220000 	.word	0x10220000
 8001520:	10210000 	.word	0x10210000
 8001524:	10120000 	.word	0x10120000
 8001528:	10110000 	.word	0x10110000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001560:	e003      	b.n	800156a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43d9      	mvns	r1, r3
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	400b      	ands	r3, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e26c      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8087 	beq.w	80016d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d00c      	beq.n	80015ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d4:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d112      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
 80015e0:	4b8c      	ldr	r3, [pc, #560]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d10b      	bne.n	8001606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d06c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x12c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d168      	bne.n	80016d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e246      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x76>
 8001610:	4b80      	ldr	r3, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7f      	ldr	r2, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e02e      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b78      	ldr	r3, [pc, #480]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a77      	ldr	r2, [pc, #476]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0xbc>
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a71      	ldr	r2, [pc, #452]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xd4>
 8001664:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a6a      	ldr	r2, [pc, #424]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a67      	ldr	r2, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc1c 	bl	8000ec0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fc18 	bl	8000ec0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1fa      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0xe4>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fc08 	bl	8000ec0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fc04 	bl	8000ec0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1e6      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x10c>
 80016d2:	e000      	b.n	80016d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d063      	beq.n	80017aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	4b4c      	ldr	r3, [pc, #304]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d11c      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
 80016fa:	4b46      	ldr	r3, [pc, #280]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d005      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e1ba      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4939      	ldr	r1, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	e03a      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fbbd 	bl	8000ec0 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174a:	f7ff fbb9 	bl	8000ec0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e19b      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4927      	ldr	r1, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e015      	b.n	80017aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fb9c 	bl	8000ec0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fb98 	bl	8000ec0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e17a      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03a      	beq.n	800182c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d019      	beq.n	80017f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fb7c 	bl	8000ec0 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb78 	bl	8000ec0 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e15a      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f000 fad8 	bl	8001da0 <RCC_Delay>
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb62 	bl	8000ec0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	e00f      	b.n	8001820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fb5e 	bl	8000ec0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d908      	bls.n	8001820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e140      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	42420000 	.word	0x42420000
 800181c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b9e      	ldr	r3, [pc, #632]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e9      	bne.n	8001800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a6 	beq.w	8001986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b97      	ldr	r3, [pc, #604]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a93      	ldr	r2, [pc, #588]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b91      	ldr	r3, [pc, #580]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a8a      	ldr	r2, [pc, #552]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fb1f 	bl	8000ec0 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fb1b 	bl	8000ec0 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0fd      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b81      	ldr	r3, [pc, #516]	; (8001aa0 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018ac:	4b7b      	ldr	r3, [pc, #492]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a7a      	ldr	r2, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	e02d      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x334>
 80018c2:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a75      	ldr	r2, [pc, #468]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a72      	ldr	r2, [pc, #456]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x356>
 80018e4:	4b6d      	ldr	r3, [pc, #436]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a6c      	ldr	r2, [pc, #432]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	4b6a      	ldr	r3, [pc, #424]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4a69      	ldr	r2, [pc, #420]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x36e>
 80018fe:	4b67      	ldr	r3, [pc, #412]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	6213      	str	r3, [r2, #32]
 800190a:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a63      	ldr	r2, [pc, #396]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001910:	f023 0304 	bic.w	r3, r3, #4
 8001914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff facf 	bl	8000ec0 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff facb 	bl	8000ec0 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0ab      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	4b57      	ldr	r3, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x37e>
 8001948:	e014      	b.n	8001974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fab9 	bl	8000ec0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fab5 	bl	8000ec0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e095      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ee      	bne.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a47      	ldr	r2, [pc, #284]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 8081 	beq.w	8001a92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d061      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d146      	bne.n	8001a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a4:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa89 	bl	8000ec0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b2:	f7ff fa85 	bl	8000ec0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e067      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	492d      	ldr	r1, [pc, #180]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a19      	ldr	r1, [r3, #32]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	430b      	orrs	r3, r1
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fa59 	bl	8000ec0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fa55 	bl	8000ec0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e037      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
 8001a30:	e02f      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_RCC_OscConfig+0x4fc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fa42 	bl	8000ec0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fa3e 	bl	8000ec0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e020      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x498>
 8001a5e:	e018      	b.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e013      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	42420060 	.word	0x42420060

08001aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0d0      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d910      	bls.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4965      	ldr	r1, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d040      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e073      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06b      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4936      	ldr	r1, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f992 	bl	8000ec0 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff f98e 	bl	8000ec0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e053      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4922      	ldr	r1, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1cc>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1d0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f8f0 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003868 	.word	0x08003868
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b490      	push	{r4, r7}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c82:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c84:	1d3c      	adds	r4, r7, #4
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c8c:	f240 2301 	movw	r3, #513	; 0x201
 8001c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x40>
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cba:	e02d      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	623b      	str	r3, [r7, #32]
      break;
 8001cc0:	e02d      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	0c9b      	lsrs	r3, r3, #18
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cce:	4413      	add	r3, r2
 8001cd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c5b      	lsrs	r3, r3, #17
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cee:	4413      	add	r3, r2
 8001cf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4a0e      	ldr	r2, [pc, #56]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	fb02 f203 	mul.w	r2, r2, r3
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	e004      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	623b      	str	r3, [r7, #32]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d1a:	623b      	str	r3, [r7, #32]
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc90      	pop	{r4, r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	08003858 	.word	0x08003858
 8001d30:	40021000 	.word	0x40021000
 8001d34:	007a1200 	.word	0x007a1200
 8001d38:	003d0900 	.word	0x003d0900

08001d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff2 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08003878 	.word	0x08003878

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08003878 	.word	0x08003878

08001da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <RCC_Delay+0x34>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <RCC_Delay+0x38>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0a5b      	lsrs	r3, r3, #9
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dbc:	bf00      	nop
  }
  while (Delay --);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	60fa      	str	r2, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f9      	bne.n	8001dbc <RCC_Delay+0x1c>
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e041      	b.n	8001e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe febe 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f000 fa6a 	bl	80022f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d001      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e035      	b.n	8001f00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <HAL_TIM_Base_Start_IT+0x90>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_TIM_Base_Start_IT+0x4e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d004      	beq.n	8001eca <HAL_TIM_Base_Start_IT+0x4e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_TIM_Base_Start_IT+0x94>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d111      	bne.n	8001eee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	d010      	beq.n	8001efe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	e007      	b.n	8001efe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40000400 	.word	0x40000400

08001f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0202 	mvn.w	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f9b1 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f9a4 	bl	80022ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9b3 	bl	80022d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0204 	mvn.w	r2, #4
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f987 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f97a 	bl	80022ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f989 	bl	80022d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d122      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d11b      	bne.n	8002018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0208 	mvn.w	r2, #8
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f95d 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f950 	bl	80022ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f95f 	bl	80022d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b10      	cmp	r3, #16
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b10      	cmp	r3, #16
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0210 	mvn.w	r2, #16
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2208      	movs	r2, #8
 8002042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f933 	bl	80022be <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f926 	bl	80022ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f935 	bl	80022d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0201 	mvn.w	r2, #1
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe fa00 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b0:	2b80      	cmp	r3, #128	; 0x80
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa67 	bl	8002592 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b40      	cmp	r3, #64	; 0x40
 80020d0:	d10e      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8f9 	bl	80022e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b20      	cmp	r3, #32
 800210a:	d107      	bne.n	800211c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0220 	mvn.w	r2, #32
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fa32 	bl	8002580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_TIM_ConfigClockSource+0x18>
 8002138:	2302      	movs	r3, #2
 800213a:	e0b3      	b.n	80022a4 <HAL_TIM_ConfigClockSource+0x180>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800215a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002162:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002174:	d03e      	beq.n	80021f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217a:	f200 8087 	bhi.w	800228c <HAL_TIM_ConfigClockSource+0x168>
 800217e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002182:	f000 8085 	beq.w	8002290 <HAL_TIM_ConfigClockSource+0x16c>
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d87f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 800218c:	2b70      	cmp	r3, #112	; 0x70
 800218e:	d01a      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002190:	2b70      	cmp	r3, #112	; 0x70
 8002192:	d87b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 8002194:	2b60      	cmp	r3, #96	; 0x60
 8002196:	d050      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x116>
 8002198:	2b60      	cmp	r3, #96	; 0x60
 800219a:	d877      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 800219c:	2b50      	cmp	r3, #80	; 0x50
 800219e:	d03c      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xf6>
 80021a0:	2b50      	cmp	r3, #80	; 0x50
 80021a2:	d873      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 80021a4:	2b40      	cmp	r3, #64	; 0x40
 80021a6:	d058      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x136>
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d86f      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d064      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x156>
 80021b0:	2b30      	cmp	r3, #48	; 0x30
 80021b2:	d86b      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d060      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x156>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d867      	bhi.n	800228c <HAL_TIM_ConfigClockSource+0x168>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05c      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x156>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d05a      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021c4:	e062      	b.n	800228c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f000 f95c 	bl	8002492 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	609a      	str	r2, [r3, #8]
      break;
 80021f2:	e04e      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f000 f945 	bl	8002492 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002216:	609a      	str	r2, [r3, #8]
      break;
 8002218:	e03b      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f8bc 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2150      	movs	r1, #80	; 0x50
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f913 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002238:	e02b      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f8da 	bl	8002400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2160      	movs	r1, #96	; 0x60
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f903 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002258:	e01b      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f89c 	bl	80023a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2140      	movs	r1, #64	; 0x40
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f8f3 	bl	800245e <TIM_ITRx_SetConfig>
      break;
 8002278:	e00b      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f000 f8ea 	bl	800245e <TIM_ITRx_SetConfig>
        break;
 800228a:	e002      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002290:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xa8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x28>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x28>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <TIM_Base_SetConfig+0xac>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <TIM_Base_SetConfig+0xa8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <TIM_Base_SetConfig+0x52>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d003      	beq.n	8002346 <TIM_Base_SetConfig+0x52>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <TIM_Base_SetConfig+0xac>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <TIM_Base_SetConfig+0xa8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	615a      	str	r2, [r3, #20]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400

080023a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0201 	bic.w	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f023 030a 	bic.w	r3, r3, #10
 80023e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	621a      	str	r2, [r3, #32]
}
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f023 0210 	bic.w	r2, r3, #16
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800242a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800243c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	621a      	str	r2, [r3, #32]
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	f043 0307 	orr.w	r3, r3, #7
 8002480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	021a      	lsls	r2, r3, #8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e041      	b.n	800256c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a14      	ldr	r2, [pc, #80]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d004      	beq.n	8002540 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10c      	bne.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	4313      	orrs	r3, r2
 8002550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400

08002580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e03f      	b.n	8002636 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fafe 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fc25 	bl	8002e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800261c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b08a      	sub	sp, #40	; 0x28
 8002642:	af02      	add	r7, sp, #8
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d17c      	bne.n	8002758 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_UART_Transmit+0x2c>
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e075      	b.n	800275a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_UART_Transmit+0x3e>
 8002678:	2302      	movs	r3, #2
 800267a:	e06e      	b.n	800275a <HAL_UART_Transmit+0x11c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002692:	f7fe fc15 	bl	8000ec0 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ac:	d108      	bne.n	80026c0 <HAL_UART_Transmit+0x82>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d104      	bne.n	80026c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e003      	b.n	80026c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026d0:	e02a      	b.n	8002728 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fa11 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e036      	b.n	800275a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	3302      	adds	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	e007      	b.n	800271a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1cf      	bne.n	80026d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f9e1 	bl	8002b04 <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e006      	b.n	800275a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3720      	adds	r7, #32
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x52>
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa99 	bl	8002ce6 <UART_Receive_IT>
      return;
 80027b4:	e17b      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80b1 	beq.w	8002920 <HAL_UART_IRQHandler+0x1bc>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_UART_IRQHandler+0x70>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a6 	beq.w	8002920 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_UART_IRQHandler+0x90>
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0201 	orr.w	r2, r3, #1
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_UART_IRQHandler+0xb0>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0202 	orr.w	r2, r3, #2
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_UART_IRQHandler+0xd0>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <HAL_UART_IRQHandler+0xfa>
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_UART_IRQHandler+0xee>
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 811e 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_UART_IRQHandler+0x11e>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fa32 	bl	8002ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <HAL_UART_IRQHandler+0x146>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d031      	beq.n	800290e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f974 	bl	8002b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4a76      	ldr	r2, [pc, #472]	; (8002ab4 <HAL_UART_IRQHandler+0x350>)
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fc3e 	bl	8001164 <HAL_DMA_Abort_IT>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f8:	4610      	mov	r0, r2
 80028fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028fc:	e00e      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8ec 	bl	8002adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	e00a      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8e8 	bl	8002adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e006      	b.n	800291c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8e4 	bl	8002adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800291a:	e0c3      	b.n	8002aa4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	bf00      	nop
    return;
 800291e:	e0c1      	b.n	8002aa4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 80a1 	bne.w	8002a6c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 809b 	beq.w	8002a6c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 8095 	beq.w	8002a6c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d04e      	beq.n	8002a04 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002970:	8a3b      	ldrh	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8098 	beq.w	8002aa8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800297c:	8a3a      	ldrh	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	f080 8092 	bcs.w	8002aa8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8a3a      	ldrh	r2, [r7, #16]
 8002988:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b20      	cmp	r3, #32
 8002992:	d02b      	beq.n	80029ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0210 	bic.w	r2, r2, #16
 80029e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fb81 	bl	80010ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f876 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a02:	e051      	b.n	8002aa8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d047      	beq.n	8002aac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002a1c:	8a7b      	ldrh	r3, [r7, #18]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d044      	beq.n	8002aac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a30:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0210 	bic.w	r2, r2, #16
 8002a5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a60:	8a7b      	ldrh	r3, [r7, #18]
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f842 	bl	8002aee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a6a:	e01f      	b.n	8002aac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_UART_IRQHandler+0x324>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f8c9 	bl	8002c18 <UART_Transmit_IT>
    return;
 8002a86:	e012      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <HAL_UART_IRQHandler+0x34a>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f90a 	bl	8002cb6 <UART_EndTransmit_IT>
    return;
 8002aa2:	e004      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
    return;
 8002aa4:	bf00      	nop
 8002aa6:	e002      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
      return;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <HAL_UART_IRQHandler+0x34a>
      return;
 8002aac:	bf00      	nop
  }
}
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	08002bf1 	.word	0x08002bf1

08002ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b14:	e02c      	b.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d028      	beq.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b24:	f7fe f9cc 	bl	8000ec0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d21d      	bcs.n	8002b70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e00f      	b.n	8002b90 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d0c3      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0210 	bic.w	r2, r2, #16
 8002bd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ff66 	bl	8002adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b21      	cmp	r3, #33	; 0x21
 8002c2a:	d13e      	bne.n	8002caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d114      	bne.n	8002c60 <UART_Transmit_IT+0x48>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d110      	bne.n	8002c60 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]
 8002c5e:	e008      	b.n	8002c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6211      	str	r1, [r2, #32]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff feee 	bl	8002ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b22      	cmp	r3, #34	; 0x22
 8002cf8:	f040 8099 	bne.w	8002e2e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d117      	bne.n	8002d36 <UART_Receive_IT+0x50>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
 8002d34:	e026      	b.n	8002d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d007      	beq.n	8002d5a <UART_Receive_IT+0x74>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <UART_Receive_IT+0x82>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e008      	b.n	8002d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d148      	bne.n	8002e2a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0220 	bic.w	r2, r2, #32
 8002da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d123      	bne.n	8002e20 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0210 	bic.w	r2, r2, #16
 8002dec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d10a      	bne.n	8002e12 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fe68 	bl	8002aee <HAL_UARTEx_RxEventCallback>
 8002e1e:	e002      	b.n	8002e26 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fe52 	bl	8002aca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e002      	b.n	8002e30 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e72:	f023 030c 	bic.w	r3, r3, #12
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <UART_SetConfig+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d103      	bne.n	8002ea8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f7fe ff6a 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	e002      	b.n	8002eae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f7fe ff52 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <UART_SetConfig+0x118>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	0119      	lsls	r1, r3, #4
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <UART_SetConfig+0x118>)
 8002ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <UART_SetConfig+0x118>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	4419      	add	r1, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <UART_SetConfig+0x118>)
 8002f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2064      	movs	r0, #100	; 0x64
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <UART_SetConfig+0x118>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	440a      	add	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	51eb851f 	.word	0x51eb851f

08002f54 <__errno>:
 8002f54:	4b01      	ldr	r3, [pc, #4]	; (8002f5c <__errno+0x8>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c

08002f60 <__libc_init_array>:
 8002f60:	b570      	push	{r4, r5, r6, lr}
 8002f62:	2600      	movs	r6, #0
 8002f64:	4d0c      	ldr	r5, [pc, #48]	; (8002f98 <__libc_init_array+0x38>)
 8002f66:	4c0d      	ldr	r4, [pc, #52]	; (8002f9c <__libc_init_array+0x3c>)
 8002f68:	1b64      	subs	r4, r4, r5
 8002f6a:	10a4      	asrs	r4, r4, #2
 8002f6c:	42a6      	cmp	r6, r4
 8002f6e:	d109      	bne.n	8002f84 <__libc_init_array+0x24>
 8002f70:	f000 fc5c 	bl	800382c <_init>
 8002f74:	2600      	movs	r6, #0
 8002f76:	4d0a      	ldr	r5, [pc, #40]	; (8002fa0 <__libc_init_array+0x40>)
 8002f78:	4c0a      	ldr	r4, [pc, #40]	; (8002fa4 <__libc_init_array+0x44>)
 8002f7a:	1b64      	subs	r4, r4, r5
 8002f7c:	10a4      	asrs	r4, r4, #2
 8002f7e:	42a6      	cmp	r6, r4
 8002f80:	d105      	bne.n	8002f8e <__libc_init_array+0x2e>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f88:	4798      	blx	r3
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7ee      	b.n	8002f6c <__libc_init_array+0xc>
 8002f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f92:	4798      	blx	r3
 8002f94:	3601      	adds	r6, #1
 8002f96:	e7f2      	b.n	8002f7e <__libc_init_array+0x1e>
 8002f98:	080038b4 	.word	0x080038b4
 8002f9c:	080038b4 	.word	0x080038b4
 8002fa0:	080038b4 	.word	0x080038b4
 8002fa4:	080038b8 	.word	0x080038b8

08002fa8 <memset>:
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4402      	add	r2, r0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <siprintf>:
 8002fb8:	b40e      	push	{r1, r2, r3}
 8002fba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fbe:	b500      	push	{lr}
 8002fc0:	b09c      	sub	sp, #112	; 0x70
 8002fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fc4:	9002      	str	r0, [sp, #8]
 8002fc6:	9006      	str	r0, [sp, #24]
 8002fc8:	9107      	str	r1, [sp, #28]
 8002fca:	9104      	str	r1, [sp, #16]
 8002fcc:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <siprintf+0x38>)
 8002fce:	4909      	ldr	r1, [pc, #36]	; (8002ff4 <siprintf+0x3c>)
 8002fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fd4:	9105      	str	r1, [sp, #20]
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	a902      	add	r1, sp, #8
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	f000 f868 	bl	80030b0 <_svfiprintf_r>
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	9b02      	ldr	r3, [sp, #8]
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	b01c      	add	sp, #112	; 0x70
 8002fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fec:	b003      	add	sp, #12
 8002fee:	4770      	bx	lr
 8002ff0:	2000000c 	.word	0x2000000c
 8002ff4:	ffff0208 	.word	0xffff0208

08002ff8 <__ssputs_r>:
 8002ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ffc:	688e      	ldr	r6, [r1, #8]
 8002ffe:	4682      	mov	sl, r0
 8003000:	429e      	cmp	r6, r3
 8003002:	460c      	mov	r4, r1
 8003004:	4690      	mov	r8, r2
 8003006:	461f      	mov	r7, r3
 8003008:	d838      	bhi.n	800307c <__ssputs_r+0x84>
 800300a:	898a      	ldrh	r2, [r1, #12]
 800300c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003010:	d032      	beq.n	8003078 <__ssputs_r+0x80>
 8003012:	6825      	ldr	r5, [r4, #0]
 8003014:	6909      	ldr	r1, [r1, #16]
 8003016:	3301      	adds	r3, #1
 8003018:	eba5 0901 	sub.w	r9, r5, r1
 800301c:	6965      	ldr	r5, [r4, #20]
 800301e:	444b      	add	r3, r9
 8003020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003028:	106d      	asrs	r5, r5, #1
 800302a:	429d      	cmp	r5, r3
 800302c:	bf38      	it	cc
 800302e:	461d      	movcc	r5, r3
 8003030:	0553      	lsls	r3, r2, #21
 8003032:	d531      	bpl.n	8003098 <__ssputs_r+0xa0>
 8003034:	4629      	mov	r1, r5
 8003036:	f000 fb53 	bl	80036e0 <_malloc_r>
 800303a:	4606      	mov	r6, r0
 800303c:	b950      	cbnz	r0, 8003054 <__ssputs_r+0x5c>
 800303e:	230c      	movs	r3, #12
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f8ca 3000 	str.w	r3, [sl]
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800304e:	81a3      	strh	r3, [r4, #12]
 8003050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003054:	464a      	mov	r2, r9
 8003056:	6921      	ldr	r1, [r4, #16]
 8003058:	f000 face 	bl	80035f8 <memcpy>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003066:	81a3      	strh	r3, [r4, #12]
 8003068:	6126      	str	r6, [r4, #16]
 800306a:	444e      	add	r6, r9
 800306c:	6026      	str	r6, [r4, #0]
 800306e:	463e      	mov	r6, r7
 8003070:	6165      	str	r5, [r4, #20]
 8003072:	eba5 0509 	sub.w	r5, r5, r9
 8003076:	60a5      	str	r5, [r4, #8]
 8003078:	42be      	cmp	r6, r7
 800307a:	d900      	bls.n	800307e <__ssputs_r+0x86>
 800307c:	463e      	mov	r6, r7
 800307e:	4632      	mov	r2, r6
 8003080:	4641      	mov	r1, r8
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	f000 fac6 	bl	8003614 <memmove>
 8003088:	68a3      	ldr	r3, [r4, #8]
 800308a:	6822      	ldr	r2, [r4, #0]
 800308c:	1b9b      	subs	r3, r3, r6
 800308e:	4432      	add	r2, r6
 8003090:	2000      	movs	r0, #0
 8003092:	60a3      	str	r3, [r4, #8]
 8003094:	6022      	str	r2, [r4, #0]
 8003096:	e7db      	b.n	8003050 <__ssputs_r+0x58>
 8003098:	462a      	mov	r2, r5
 800309a:	f000 fb7b 	bl	8003794 <_realloc_r>
 800309e:	4606      	mov	r6, r0
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1e1      	bne.n	8003068 <__ssputs_r+0x70>
 80030a4:	4650      	mov	r0, sl
 80030a6:	6921      	ldr	r1, [r4, #16]
 80030a8:	f000 face 	bl	8003648 <_free_r>
 80030ac:	e7c7      	b.n	800303e <__ssputs_r+0x46>
	...

080030b0 <_svfiprintf_r>:
 80030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b4:	4698      	mov	r8, r3
 80030b6:	898b      	ldrh	r3, [r1, #12]
 80030b8:	4607      	mov	r7, r0
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	460d      	mov	r5, r1
 80030be:	4614      	mov	r4, r2
 80030c0:	b09d      	sub	sp, #116	; 0x74
 80030c2:	d50e      	bpl.n	80030e2 <_svfiprintf_r+0x32>
 80030c4:	690b      	ldr	r3, [r1, #16]
 80030c6:	b963      	cbnz	r3, 80030e2 <_svfiprintf_r+0x32>
 80030c8:	2140      	movs	r1, #64	; 0x40
 80030ca:	f000 fb09 	bl	80036e0 <_malloc_r>
 80030ce:	6028      	str	r0, [r5, #0]
 80030d0:	6128      	str	r0, [r5, #16]
 80030d2:	b920      	cbnz	r0, 80030de <_svfiprintf_r+0x2e>
 80030d4:	230c      	movs	r3, #12
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	e0d1      	b.n	8003282 <_svfiprintf_r+0x1d2>
 80030de:	2340      	movs	r3, #64	; 0x40
 80030e0:	616b      	str	r3, [r5, #20]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9309      	str	r3, [sp, #36]	; 0x24
 80030e6:	2320      	movs	r3, #32
 80030e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ec:	2330      	movs	r3, #48	; 0x30
 80030ee:	f04f 0901 	mov.w	r9, #1
 80030f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800329c <_svfiprintf_r+0x1ec>
 80030fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030fe:	4623      	mov	r3, r4
 8003100:	469a      	mov	sl, r3
 8003102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003106:	b10a      	cbz	r2, 800310c <_svfiprintf_r+0x5c>
 8003108:	2a25      	cmp	r2, #37	; 0x25
 800310a:	d1f9      	bne.n	8003100 <_svfiprintf_r+0x50>
 800310c:	ebba 0b04 	subs.w	fp, sl, r4
 8003110:	d00b      	beq.n	800312a <_svfiprintf_r+0x7a>
 8003112:	465b      	mov	r3, fp
 8003114:	4622      	mov	r2, r4
 8003116:	4629      	mov	r1, r5
 8003118:	4638      	mov	r0, r7
 800311a:	f7ff ff6d 	bl	8002ff8 <__ssputs_r>
 800311e:	3001      	adds	r0, #1
 8003120:	f000 80aa 	beq.w	8003278 <_svfiprintf_r+0x1c8>
 8003124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003126:	445a      	add	r2, fp
 8003128:	9209      	str	r2, [sp, #36]	; 0x24
 800312a:	f89a 3000 	ldrb.w	r3, [sl]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80a2 	beq.w	8003278 <_svfiprintf_r+0x1c8>
 8003134:	2300      	movs	r3, #0
 8003136:	f04f 32ff 	mov.w	r2, #4294967295
 800313a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800313e:	f10a 0a01 	add.w	sl, sl, #1
 8003142:	9304      	str	r3, [sp, #16]
 8003144:	9307      	str	r3, [sp, #28]
 8003146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800314a:	931a      	str	r3, [sp, #104]	; 0x68
 800314c:	4654      	mov	r4, sl
 800314e:	2205      	movs	r2, #5
 8003150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003154:	4851      	ldr	r0, [pc, #324]	; (800329c <_svfiprintf_r+0x1ec>)
 8003156:	f000 fa41 	bl	80035dc <memchr>
 800315a:	9a04      	ldr	r2, [sp, #16]
 800315c:	b9d8      	cbnz	r0, 8003196 <_svfiprintf_r+0xe6>
 800315e:	06d0      	lsls	r0, r2, #27
 8003160:	bf44      	itt	mi
 8003162:	2320      	movmi	r3, #32
 8003164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003168:	0711      	lsls	r1, r2, #28
 800316a:	bf44      	itt	mi
 800316c:	232b      	movmi	r3, #43	; 0x2b
 800316e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003172:	f89a 3000 	ldrb.w	r3, [sl]
 8003176:	2b2a      	cmp	r3, #42	; 0x2a
 8003178:	d015      	beq.n	80031a6 <_svfiprintf_r+0xf6>
 800317a:	4654      	mov	r4, sl
 800317c:	2000      	movs	r0, #0
 800317e:	f04f 0c0a 	mov.w	ip, #10
 8003182:	9a07      	ldr	r2, [sp, #28]
 8003184:	4621      	mov	r1, r4
 8003186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800318a:	3b30      	subs	r3, #48	; 0x30
 800318c:	2b09      	cmp	r3, #9
 800318e:	d94e      	bls.n	800322e <_svfiprintf_r+0x17e>
 8003190:	b1b0      	cbz	r0, 80031c0 <_svfiprintf_r+0x110>
 8003192:	9207      	str	r2, [sp, #28]
 8003194:	e014      	b.n	80031c0 <_svfiprintf_r+0x110>
 8003196:	eba0 0308 	sub.w	r3, r0, r8
 800319a:	fa09 f303 	lsl.w	r3, r9, r3
 800319e:	4313      	orrs	r3, r2
 80031a0:	46a2      	mov	sl, r4
 80031a2:	9304      	str	r3, [sp, #16]
 80031a4:	e7d2      	b.n	800314c <_svfiprintf_r+0x9c>
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	1d19      	adds	r1, r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	9103      	str	r1, [sp, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfbb      	ittet	lt
 80031b2:	425b      	neglt	r3, r3
 80031b4:	f042 0202 	orrlt.w	r2, r2, #2
 80031b8:	9307      	strge	r3, [sp, #28]
 80031ba:	9307      	strlt	r3, [sp, #28]
 80031bc:	bfb8      	it	lt
 80031be:	9204      	strlt	r2, [sp, #16]
 80031c0:	7823      	ldrb	r3, [r4, #0]
 80031c2:	2b2e      	cmp	r3, #46	; 0x2e
 80031c4:	d10c      	bne.n	80031e0 <_svfiprintf_r+0x130>
 80031c6:	7863      	ldrb	r3, [r4, #1]
 80031c8:	2b2a      	cmp	r3, #42	; 0x2a
 80031ca:	d135      	bne.n	8003238 <_svfiprintf_r+0x188>
 80031cc:	9b03      	ldr	r3, [sp, #12]
 80031ce:	3402      	adds	r4, #2
 80031d0:	1d1a      	adds	r2, r3, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	9203      	str	r2, [sp, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bfb8      	it	lt
 80031da:	f04f 33ff 	movlt.w	r3, #4294967295
 80031de:	9305      	str	r3, [sp, #20]
 80031e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80032ac <_svfiprintf_r+0x1fc>
 80031e4:	2203      	movs	r2, #3
 80031e6:	4650      	mov	r0, sl
 80031e8:	7821      	ldrb	r1, [r4, #0]
 80031ea:	f000 f9f7 	bl	80035dc <memchr>
 80031ee:	b140      	cbz	r0, 8003202 <_svfiprintf_r+0x152>
 80031f0:	2340      	movs	r3, #64	; 0x40
 80031f2:	eba0 000a 	sub.w	r0, r0, sl
 80031f6:	fa03 f000 	lsl.w	r0, r3, r0
 80031fa:	9b04      	ldr	r3, [sp, #16]
 80031fc:	3401      	adds	r4, #1
 80031fe:	4303      	orrs	r3, r0
 8003200:	9304      	str	r3, [sp, #16]
 8003202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003206:	2206      	movs	r2, #6
 8003208:	4825      	ldr	r0, [pc, #148]	; (80032a0 <_svfiprintf_r+0x1f0>)
 800320a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800320e:	f000 f9e5 	bl	80035dc <memchr>
 8003212:	2800      	cmp	r0, #0
 8003214:	d038      	beq.n	8003288 <_svfiprintf_r+0x1d8>
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <_svfiprintf_r+0x1f4>)
 8003218:	bb1b      	cbnz	r3, 8003262 <_svfiprintf_r+0x1b2>
 800321a:	9b03      	ldr	r3, [sp, #12]
 800321c:	3307      	adds	r3, #7
 800321e:	f023 0307 	bic.w	r3, r3, #7
 8003222:	3308      	adds	r3, #8
 8003224:	9303      	str	r3, [sp, #12]
 8003226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003228:	4433      	add	r3, r6
 800322a:	9309      	str	r3, [sp, #36]	; 0x24
 800322c:	e767      	b.n	80030fe <_svfiprintf_r+0x4e>
 800322e:	460c      	mov	r4, r1
 8003230:	2001      	movs	r0, #1
 8003232:	fb0c 3202 	mla	r2, ip, r2, r3
 8003236:	e7a5      	b.n	8003184 <_svfiprintf_r+0xd4>
 8003238:	2300      	movs	r3, #0
 800323a:	f04f 0c0a 	mov.w	ip, #10
 800323e:	4619      	mov	r1, r3
 8003240:	3401      	adds	r4, #1
 8003242:	9305      	str	r3, [sp, #20]
 8003244:	4620      	mov	r0, r4
 8003246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800324a:	3a30      	subs	r2, #48	; 0x30
 800324c:	2a09      	cmp	r2, #9
 800324e:	d903      	bls.n	8003258 <_svfiprintf_r+0x1a8>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0c5      	beq.n	80031e0 <_svfiprintf_r+0x130>
 8003254:	9105      	str	r1, [sp, #20]
 8003256:	e7c3      	b.n	80031e0 <_svfiprintf_r+0x130>
 8003258:	4604      	mov	r4, r0
 800325a:	2301      	movs	r3, #1
 800325c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003260:	e7f0      	b.n	8003244 <_svfiprintf_r+0x194>
 8003262:	ab03      	add	r3, sp, #12
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	462a      	mov	r2, r5
 8003268:	4638      	mov	r0, r7
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <_svfiprintf_r+0x1f8>)
 800326c:	a904      	add	r1, sp, #16
 800326e:	f3af 8000 	nop.w
 8003272:	1c42      	adds	r2, r0, #1
 8003274:	4606      	mov	r6, r0
 8003276:	d1d6      	bne.n	8003226 <_svfiprintf_r+0x176>
 8003278:	89ab      	ldrh	r3, [r5, #12]
 800327a:	065b      	lsls	r3, r3, #25
 800327c:	f53f af2c 	bmi.w	80030d8 <_svfiprintf_r+0x28>
 8003280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003282:	b01d      	add	sp, #116	; 0x74
 8003284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003288:	ab03      	add	r3, sp, #12
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	462a      	mov	r2, r5
 800328e:	4638      	mov	r0, r7
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <_svfiprintf_r+0x1f8>)
 8003292:	a904      	add	r1, sp, #16
 8003294:	f000 f87c 	bl	8003390 <_printf_i>
 8003298:	e7eb      	b.n	8003272 <_svfiprintf_r+0x1c2>
 800329a:	bf00      	nop
 800329c:	08003880 	.word	0x08003880
 80032a0:	0800388a 	.word	0x0800388a
 80032a4:	00000000 	.word	0x00000000
 80032a8:	08002ff9 	.word	0x08002ff9
 80032ac:	08003886 	.word	0x08003886

080032b0 <_printf_common>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	4616      	mov	r6, r2
 80032b6:	4699      	mov	r9, r3
 80032b8:	688a      	ldr	r2, [r1, #8]
 80032ba:	690b      	ldr	r3, [r1, #16]
 80032bc:	4607      	mov	r7, r0
 80032be:	4293      	cmp	r3, r2
 80032c0:	bfb8      	it	lt
 80032c2:	4613      	movlt	r3, r2
 80032c4:	6033      	str	r3, [r6, #0]
 80032c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ca:	460c      	mov	r4, r1
 80032cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d0:	b10a      	cbz	r2, 80032d6 <_printf_common+0x26>
 80032d2:	3301      	adds	r3, #1
 80032d4:	6033      	str	r3, [r6, #0]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	0699      	lsls	r1, r3, #26
 80032da:	bf42      	ittt	mi
 80032dc:	6833      	ldrmi	r3, [r6, #0]
 80032de:	3302      	addmi	r3, #2
 80032e0:	6033      	strmi	r3, [r6, #0]
 80032e2:	6825      	ldr	r5, [r4, #0]
 80032e4:	f015 0506 	ands.w	r5, r5, #6
 80032e8:	d106      	bne.n	80032f8 <_printf_common+0x48>
 80032ea:	f104 0a19 	add.w	sl, r4, #25
 80032ee:	68e3      	ldr	r3, [r4, #12]
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	42ab      	cmp	r3, r5
 80032f6:	dc28      	bgt.n	800334a <_printf_common+0x9a>
 80032f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032fc:	1e13      	subs	r3, r2, #0
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	bf18      	it	ne
 8003302:	2301      	movne	r3, #1
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d42d      	bmi.n	8003364 <_printf_common+0xb4>
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003310:	47c0      	blx	r8
 8003312:	3001      	adds	r0, #1
 8003314:	d020      	beq.n	8003358 <_printf_common+0xa8>
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	68e5      	ldr	r5, [r4, #12]
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf18      	it	ne
 8003322:	2500      	movne	r5, #0
 8003324:	6832      	ldr	r2, [r6, #0]
 8003326:	f04f 0600 	mov.w	r6, #0
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	bf08      	it	eq
 800332e:	1aad      	subeq	r5, r5, r2
 8003330:	6922      	ldr	r2, [r4, #16]
 8003332:	bf08      	it	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	4293      	cmp	r3, r2
 800333a:	bfc4      	itt	gt
 800333c:	1a9b      	subgt	r3, r3, r2
 800333e:	18ed      	addgt	r5, r5, r3
 8003340:	341a      	adds	r4, #26
 8003342:	42b5      	cmp	r5, r6
 8003344:	d11a      	bne.n	800337c <_printf_common+0xcc>
 8003346:	2000      	movs	r0, #0
 8003348:	e008      	b.n	800335c <_printf_common+0xac>
 800334a:	2301      	movs	r3, #1
 800334c:	4652      	mov	r2, sl
 800334e:	4649      	mov	r1, r9
 8003350:	4638      	mov	r0, r7
 8003352:	47c0      	blx	r8
 8003354:	3001      	adds	r0, #1
 8003356:	d103      	bne.n	8003360 <_printf_common+0xb0>
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003360:	3501      	adds	r5, #1
 8003362:	e7c4      	b.n	80032ee <_printf_common+0x3e>
 8003364:	2030      	movs	r0, #48	; 0x30
 8003366:	18e1      	adds	r1, r4, r3
 8003368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003372:	4422      	add	r2, r4
 8003374:	3302      	adds	r3, #2
 8003376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800337a:	e7c5      	b.n	8003308 <_printf_common+0x58>
 800337c:	2301      	movs	r3, #1
 800337e:	4622      	mov	r2, r4
 8003380:	4649      	mov	r1, r9
 8003382:	4638      	mov	r0, r7
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d0e6      	beq.n	8003358 <_printf_common+0xa8>
 800338a:	3601      	adds	r6, #1
 800338c:	e7d9      	b.n	8003342 <_printf_common+0x92>
	...

08003390 <_printf_i>:
 8003390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	460c      	mov	r4, r1
 8003396:	7e27      	ldrb	r7, [r4, #24]
 8003398:	4691      	mov	r9, r2
 800339a:	2f78      	cmp	r7, #120	; 0x78
 800339c:	4680      	mov	r8, r0
 800339e:	469a      	mov	sl, r3
 80033a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a6:	d807      	bhi.n	80033b8 <_printf_i+0x28>
 80033a8:	2f62      	cmp	r7, #98	; 0x62
 80033aa:	d80a      	bhi.n	80033c2 <_printf_i+0x32>
 80033ac:	2f00      	cmp	r7, #0
 80033ae:	f000 80d9 	beq.w	8003564 <_printf_i+0x1d4>
 80033b2:	2f58      	cmp	r7, #88	; 0x58
 80033b4:	f000 80a4 	beq.w	8003500 <_printf_i+0x170>
 80033b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033c0:	e03a      	b.n	8003438 <_printf_i+0xa8>
 80033c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033c6:	2b15      	cmp	r3, #21
 80033c8:	d8f6      	bhi.n	80033b8 <_printf_i+0x28>
 80033ca:	a001      	add	r0, pc, #4	; (adr r0, 80033d0 <_printf_i+0x40>)
 80033cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033d0:	08003429 	.word	0x08003429
 80033d4:	0800343d 	.word	0x0800343d
 80033d8:	080033b9 	.word	0x080033b9
 80033dc:	080033b9 	.word	0x080033b9
 80033e0:	080033b9 	.word	0x080033b9
 80033e4:	080033b9 	.word	0x080033b9
 80033e8:	0800343d 	.word	0x0800343d
 80033ec:	080033b9 	.word	0x080033b9
 80033f0:	080033b9 	.word	0x080033b9
 80033f4:	080033b9 	.word	0x080033b9
 80033f8:	080033b9 	.word	0x080033b9
 80033fc:	0800354b 	.word	0x0800354b
 8003400:	0800346d 	.word	0x0800346d
 8003404:	0800352d 	.word	0x0800352d
 8003408:	080033b9 	.word	0x080033b9
 800340c:	080033b9 	.word	0x080033b9
 8003410:	0800356d 	.word	0x0800356d
 8003414:	080033b9 	.word	0x080033b9
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080033b9 	.word	0x080033b9
 8003420:	080033b9 	.word	0x080033b9
 8003424:	08003535 	.word	0x08003535
 8003428:	680b      	ldr	r3, [r1, #0]
 800342a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	600a      	str	r2, [r1, #0]
 8003434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003438:	2301      	movs	r3, #1
 800343a:	e0a4      	b.n	8003586 <_printf_i+0x1f6>
 800343c:	6825      	ldr	r5, [r4, #0]
 800343e:	6808      	ldr	r0, [r1, #0]
 8003440:	062e      	lsls	r6, r5, #24
 8003442:	f100 0304 	add.w	r3, r0, #4
 8003446:	d50a      	bpl.n	800345e <_printf_i+0xce>
 8003448:	6805      	ldr	r5, [r0, #0]
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	2d00      	cmp	r5, #0
 800344e:	da03      	bge.n	8003458 <_printf_i+0xc8>
 8003450:	232d      	movs	r3, #45	; 0x2d
 8003452:	426d      	negs	r5, r5
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	230a      	movs	r3, #10
 800345a:	485e      	ldr	r0, [pc, #376]	; (80035d4 <_printf_i+0x244>)
 800345c:	e019      	b.n	8003492 <_printf_i+0x102>
 800345e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003462:	6805      	ldr	r5, [r0, #0]
 8003464:	600b      	str	r3, [r1, #0]
 8003466:	bf18      	it	ne
 8003468:	b22d      	sxthne	r5, r5
 800346a:	e7ef      	b.n	800344c <_printf_i+0xbc>
 800346c:	680b      	ldr	r3, [r1, #0]
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	1d18      	adds	r0, r3, #4
 8003472:	6008      	str	r0, [r1, #0]
 8003474:	0628      	lsls	r0, r5, #24
 8003476:	d501      	bpl.n	800347c <_printf_i+0xec>
 8003478:	681d      	ldr	r5, [r3, #0]
 800347a:	e002      	b.n	8003482 <_printf_i+0xf2>
 800347c:	0669      	lsls	r1, r5, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0xe8>
 8003480:	881d      	ldrh	r5, [r3, #0]
 8003482:	2f6f      	cmp	r7, #111	; 0x6f
 8003484:	bf0c      	ite	eq
 8003486:	2308      	moveq	r3, #8
 8003488:	230a      	movne	r3, #10
 800348a:	4852      	ldr	r0, [pc, #328]	; (80035d4 <_printf_i+0x244>)
 800348c:	2100      	movs	r1, #0
 800348e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003492:	6866      	ldr	r6, [r4, #4]
 8003494:	2e00      	cmp	r6, #0
 8003496:	bfa8      	it	ge
 8003498:	6821      	ldrge	r1, [r4, #0]
 800349a:	60a6      	str	r6, [r4, #8]
 800349c:	bfa4      	itt	ge
 800349e:	f021 0104 	bicge.w	r1, r1, #4
 80034a2:	6021      	strge	r1, [r4, #0]
 80034a4:	b90d      	cbnz	r5, 80034aa <_printf_i+0x11a>
 80034a6:	2e00      	cmp	r6, #0
 80034a8:	d04d      	beq.n	8003546 <_printf_i+0x1b6>
 80034aa:	4616      	mov	r6, r2
 80034ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80034b0:	fb03 5711 	mls	r7, r3, r1, r5
 80034b4:	5dc7      	ldrb	r7, [r0, r7]
 80034b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034ba:	462f      	mov	r7, r5
 80034bc:	42bb      	cmp	r3, r7
 80034be:	460d      	mov	r5, r1
 80034c0:	d9f4      	bls.n	80034ac <_printf_i+0x11c>
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d10b      	bne.n	80034de <_printf_i+0x14e>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	07df      	lsls	r7, r3, #31
 80034ca:	d508      	bpl.n	80034de <_printf_i+0x14e>
 80034cc:	6923      	ldr	r3, [r4, #16]
 80034ce:	6861      	ldr	r1, [r4, #4]
 80034d0:	4299      	cmp	r1, r3
 80034d2:	bfde      	ittt	le
 80034d4:	2330      	movle	r3, #48	; 0x30
 80034d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034de:	1b92      	subs	r2, r2, r6
 80034e0:	6122      	str	r2, [r4, #16]
 80034e2:	464b      	mov	r3, r9
 80034e4:	4621      	mov	r1, r4
 80034e6:	4640      	mov	r0, r8
 80034e8:	f8cd a000 	str.w	sl, [sp]
 80034ec:	aa03      	add	r2, sp, #12
 80034ee:	f7ff fedf 	bl	80032b0 <_printf_common>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d14c      	bne.n	8003590 <_printf_i+0x200>
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	b004      	add	sp, #16
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	4834      	ldr	r0, [pc, #208]	; (80035d4 <_printf_i+0x244>)
 8003502:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003506:	680e      	ldr	r6, [r1, #0]
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	f856 5b04 	ldr.w	r5, [r6], #4
 800350e:	061f      	lsls	r7, r3, #24
 8003510:	600e      	str	r6, [r1, #0]
 8003512:	d514      	bpl.n	800353e <_printf_i+0x1ae>
 8003514:	07d9      	lsls	r1, r3, #31
 8003516:	bf44      	itt	mi
 8003518:	f043 0320 	orrmi.w	r3, r3, #32
 800351c:	6023      	strmi	r3, [r4, #0]
 800351e:	b91d      	cbnz	r5, 8003528 <_printf_i+0x198>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	f023 0320 	bic.w	r3, r3, #32
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	2310      	movs	r3, #16
 800352a:	e7af      	b.n	800348c <_printf_i+0xfc>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	6023      	str	r3, [r4, #0]
 8003534:	2378      	movs	r3, #120	; 0x78
 8003536:	4828      	ldr	r0, [pc, #160]	; (80035d8 <_printf_i+0x248>)
 8003538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800353c:	e7e3      	b.n	8003506 <_printf_i+0x176>
 800353e:	065e      	lsls	r6, r3, #25
 8003540:	bf48      	it	mi
 8003542:	b2ad      	uxthmi	r5, r5
 8003544:	e7e6      	b.n	8003514 <_printf_i+0x184>
 8003546:	4616      	mov	r6, r2
 8003548:	e7bb      	b.n	80034c2 <_printf_i+0x132>
 800354a:	680b      	ldr	r3, [r1, #0]
 800354c:	6826      	ldr	r6, [r4, #0]
 800354e:	1d1d      	adds	r5, r3, #4
 8003550:	6960      	ldr	r0, [r4, #20]
 8003552:	600d      	str	r5, [r1, #0]
 8003554:	0635      	lsls	r5, r6, #24
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	d501      	bpl.n	800355e <_printf_i+0x1ce>
 800355a:	6018      	str	r0, [r3, #0]
 800355c:	e002      	b.n	8003564 <_printf_i+0x1d4>
 800355e:	0671      	lsls	r1, r6, #25
 8003560:	d5fb      	bpl.n	800355a <_printf_i+0x1ca>
 8003562:	8018      	strh	r0, [r3, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	4616      	mov	r6, r2
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	e7ba      	b.n	80034e2 <_printf_i+0x152>
 800356c:	680b      	ldr	r3, [r1, #0]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	600a      	str	r2, [r1, #0]
 8003572:	681e      	ldr	r6, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	4630      	mov	r0, r6
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	f000 f82f 	bl	80035dc <memchr>
 800357e:	b108      	cbz	r0, 8003584 <_printf_i+0x1f4>
 8003580:	1b80      	subs	r0, r0, r6
 8003582:	6060      	str	r0, [r4, #4]
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	6123      	str	r3, [r4, #16]
 8003588:	2300      	movs	r3, #0
 800358a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358e:	e7a8      	b.n	80034e2 <_printf_i+0x152>
 8003590:	4632      	mov	r2, r6
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	6923      	ldr	r3, [r4, #16]
 8003598:	47d0      	blx	sl
 800359a:	3001      	adds	r0, #1
 800359c:	d0ab      	beq.n	80034f6 <_printf_i+0x166>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	079b      	lsls	r3, r3, #30
 80035a2:	d413      	bmi.n	80035cc <_printf_i+0x23c>
 80035a4:	68e0      	ldr	r0, [r4, #12]
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	4298      	cmp	r0, r3
 80035aa:	bfb8      	it	lt
 80035ac:	4618      	movlt	r0, r3
 80035ae:	e7a4      	b.n	80034fa <_printf_i+0x16a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	4632      	mov	r2, r6
 80035b4:	4649      	mov	r1, r9
 80035b6:	4640      	mov	r0, r8
 80035b8:	47d0      	blx	sl
 80035ba:	3001      	adds	r0, #1
 80035bc:	d09b      	beq.n	80034f6 <_printf_i+0x166>
 80035be:	3501      	adds	r5, #1
 80035c0:	68e3      	ldr	r3, [r4, #12]
 80035c2:	9903      	ldr	r1, [sp, #12]
 80035c4:	1a5b      	subs	r3, r3, r1
 80035c6:	42ab      	cmp	r3, r5
 80035c8:	dcf2      	bgt.n	80035b0 <_printf_i+0x220>
 80035ca:	e7eb      	b.n	80035a4 <_printf_i+0x214>
 80035cc:	2500      	movs	r5, #0
 80035ce:	f104 0619 	add.w	r6, r4, #25
 80035d2:	e7f5      	b.n	80035c0 <_printf_i+0x230>
 80035d4:	08003891 	.word	0x08003891
 80035d8:	080038a2 	.word	0x080038a2

080035dc <memchr>:
 80035dc:	4603      	mov	r3, r0
 80035de:	b510      	push	{r4, lr}
 80035e0:	b2c9      	uxtb	r1, r1
 80035e2:	4402      	add	r2, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	d101      	bne.n	80035ee <memchr+0x12>
 80035ea:	2000      	movs	r0, #0
 80035ec:	e003      	b.n	80035f6 <memchr+0x1a>
 80035ee:	7804      	ldrb	r4, [r0, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	428c      	cmp	r4, r1
 80035f4:	d1f6      	bne.n	80035e4 <memchr+0x8>
 80035f6:	bd10      	pop	{r4, pc}

080035f8 <memcpy>:
 80035f8:	440a      	add	r2, r1
 80035fa:	4291      	cmp	r1, r2
 80035fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003600:	d100      	bne.n	8003604 <memcpy+0xc>
 8003602:	4770      	bx	lr
 8003604:	b510      	push	{r4, lr}
 8003606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800360a:	4291      	cmp	r1, r2
 800360c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003610:	d1f9      	bne.n	8003606 <memcpy+0xe>
 8003612:	bd10      	pop	{r4, pc}

08003614 <memmove>:
 8003614:	4288      	cmp	r0, r1
 8003616:	b510      	push	{r4, lr}
 8003618:	eb01 0402 	add.w	r4, r1, r2
 800361c:	d902      	bls.n	8003624 <memmove+0x10>
 800361e:	4284      	cmp	r4, r0
 8003620:	4623      	mov	r3, r4
 8003622:	d807      	bhi.n	8003634 <memmove+0x20>
 8003624:	1e43      	subs	r3, r0, #1
 8003626:	42a1      	cmp	r1, r4
 8003628:	d008      	beq.n	800363c <memmove+0x28>
 800362a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800362e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003632:	e7f8      	b.n	8003626 <memmove+0x12>
 8003634:	4601      	mov	r1, r0
 8003636:	4402      	add	r2, r0
 8003638:	428a      	cmp	r2, r1
 800363a:	d100      	bne.n	800363e <memmove+0x2a>
 800363c:	bd10      	pop	{r4, pc}
 800363e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003646:	e7f7      	b.n	8003638 <memmove+0x24>

08003648 <_free_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4605      	mov	r5, r0
 800364c:	2900      	cmp	r1, #0
 800364e:	d043      	beq.n	80036d8 <_free_r+0x90>
 8003650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003654:	1f0c      	subs	r4, r1, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	18e4      	addlt	r4, r4, r3
 800365c:	f000 f8d0 	bl	8003800 <__malloc_lock>
 8003660:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <_free_r+0x94>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	4610      	mov	r0, r2
 8003666:	b933      	cbnz	r3, 8003676 <_free_r+0x2e>
 8003668:	6063      	str	r3, [r4, #4]
 800366a:	6014      	str	r4, [r2, #0]
 800366c:	4628      	mov	r0, r5
 800366e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003672:	f000 b8cb 	b.w	800380c <__malloc_unlock>
 8003676:	42a3      	cmp	r3, r4
 8003678:	d90a      	bls.n	8003690 <_free_r+0x48>
 800367a:	6821      	ldr	r1, [r4, #0]
 800367c:	1862      	adds	r2, r4, r1
 800367e:	4293      	cmp	r3, r2
 8003680:	bf01      	itttt	eq
 8003682:	681a      	ldreq	r2, [r3, #0]
 8003684:	685b      	ldreq	r3, [r3, #4]
 8003686:	1852      	addeq	r2, r2, r1
 8003688:	6022      	streq	r2, [r4, #0]
 800368a:	6063      	str	r3, [r4, #4]
 800368c:	6004      	str	r4, [r0, #0]
 800368e:	e7ed      	b.n	800366c <_free_r+0x24>
 8003690:	461a      	mov	r2, r3
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b10b      	cbz	r3, 800369a <_free_r+0x52>
 8003696:	42a3      	cmp	r3, r4
 8003698:	d9fa      	bls.n	8003690 <_free_r+0x48>
 800369a:	6811      	ldr	r1, [r2, #0]
 800369c:	1850      	adds	r0, r2, r1
 800369e:	42a0      	cmp	r0, r4
 80036a0:	d10b      	bne.n	80036ba <_free_r+0x72>
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	4401      	add	r1, r0
 80036a6:	1850      	adds	r0, r2, r1
 80036a8:	4283      	cmp	r3, r0
 80036aa:	6011      	str	r1, [r2, #0]
 80036ac:	d1de      	bne.n	800366c <_free_r+0x24>
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4401      	add	r1, r0
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	6053      	str	r3, [r2, #4]
 80036b8:	e7d8      	b.n	800366c <_free_r+0x24>
 80036ba:	d902      	bls.n	80036c2 <_free_r+0x7a>
 80036bc:	230c      	movs	r3, #12
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	e7d4      	b.n	800366c <_free_r+0x24>
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	1821      	adds	r1, r4, r0
 80036c6:	428b      	cmp	r3, r1
 80036c8:	bf01      	itttt	eq
 80036ca:	6819      	ldreq	r1, [r3, #0]
 80036cc:	685b      	ldreq	r3, [r3, #4]
 80036ce:	1809      	addeq	r1, r1, r0
 80036d0:	6021      	streq	r1, [r4, #0]
 80036d2:	6063      	str	r3, [r4, #4]
 80036d4:	6054      	str	r4, [r2, #4]
 80036d6:	e7c9      	b.n	800366c <_free_r+0x24>
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	20000098 	.word	0x20000098

080036e0 <_malloc_r>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	1ccd      	adds	r5, r1, #3
 80036e4:	f025 0503 	bic.w	r5, r5, #3
 80036e8:	3508      	adds	r5, #8
 80036ea:	2d0c      	cmp	r5, #12
 80036ec:	bf38      	it	cc
 80036ee:	250c      	movcc	r5, #12
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	4606      	mov	r6, r0
 80036f4:	db01      	blt.n	80036fa <_malloc_r+0x1a>
 80036f6:	42a9      	cmp	r1, r5
 80036f8:	d903      	bls.n	8003702 <_malloc_r+0x22>
 80036fa:	230c      	movs	r3, #12
 80036fc:	6033      	str	r3, [r6, #0]
 80036fe:	2000      	movs	r0, #0
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003702:	f000 f87d 	bl	8003800 <__malloc_lock>
 8003706:	4921      	ldr	r1, [pc, #132]	; (800378c <_malloc_r+0xac>)
 8003708:	680a      	ldr	r2, [r1, #0]
 800370a:	4614      	mov	r4, r2
 800370c:	b99c      	cbnz	r4, 8003736 <_malloc_r+0x56>
 800370e:	4f20      	ldr	r7, [pc, #128]	; (8003790 <_malloc_r+0xb0>)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b923      	cbnz	r3, 800371e <_malloc_r+0x3e>
 8003714:	4621      	mov	r1, r4
 8003716:	4630      	mov	r0, r6
 8003718:	f000 f862 	bl	80037e0 <_sbrk_r>
 800371c:	6038      	str	r0, [r7, #0]
 800371e:	4629      	mov	r1, r5
 8003720:	4630      	mov	r0, r6
 8003722:	f000 f85d 	bl	80037e0 <_sbrk_r>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	d123      	bne.n	8003772 <_malloc_r+0x92>
 800372a:	230c      	movs	r3, #12
 800372c:	4630      	mov	r0, r6
 800372e:	6033      	str	r3, [r6, #0]
 8003730:	f000 f86c 	bl	800380c <__malloc_unlock>
 8003734:	e7e3      	b.n	80036fe <_malloc_r+0x1e>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	1b5b      	subs	r3, r3, r5
 800373a:	d417      	bmi.n	800376c <_malloc_r+0x8c>
 800373c:	2b0b      	cmp	r3, #11
 800373e:	d903      	bls.n	8003748 <_malloc_r+0x68>
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	441c      	add	r4, r3
 8003744:	6025      	str	r5, [r4, #0]
 8003746:	e004      	b.n	8003752 <_malloc_r+0x72>
 8003748:	6863      	ldr	r3, [r4, #4]
 800374a:	42a2      	cmp	r2, r4
 800374c:	bf0c      	ite	eq
 800374e:	600b      	streq	r3, [r1, #0]
 8003750:	6053      	strne	r3, [r2, #4]
 8003752:	4630      	mov	r0, r6
 8003754:	f000 f85a 	bl	800380c <__malloc_unlock>
 8003758:	f104 000b 	add.w	r0, r4, #11
 800375c:	1d23      	adds	r3, r4, #4
 800375e:	f020 0007 	bic.w	r0, r0, #7
 8003762:	1ac2      	subs	r2, r0, r3
 8003764:	d0cc      	beq.n	8003700 <_malloc_r+0x20>
 8003766:	1a1b      	subs	r3, r3, r0
 8003768:	50a3      	str	r3, [r4, r2]
 800376a:	e7c9      	b.n	8003700 <_malloc_r+0x20>
 800376c:	4622      	mov	r2, r4
 800376e:	6864      	ldr	r4, [r4, #4]
 8003770:	e7cc      	b.n	800370c <_malloc_r+0x2c>
 8003772:	1cc4      	adds	r4, r0, #3
 8003774:	f024 0403 	bic.w	r4, r4, #3
 8003778:	42a0      	cmp	r0, r4
 800377a:	d0e3      	beq.n	8003744 <_malloc_r+0x64>
 800377c:	1a21      	subs	r1, r4, r0
 800377e:	4630      	mov	r0, r6
 8003780:	f000 f82e 	bl	80037e0 <_sbrk_r>
 8003784:	3001      	adds	r0, #1
 8003786:	d1dd      	bne.n	8003744 <_malloc_r+0x64>
 8003788:	e7cf      	b.n	800372a <_malloc_r+0x4a>
 800378a:	bf00      	nop
 800378c:	20000098 	.word	0x20000098
 8003790:	2000009c 	.word	0x2000009c

08003794 <_realloc_r>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	4607      	mov	r7, r0
 8003798:	4614      	mov	r4, r2
 800379a:	460e      	mov	r6, r1
 800379c:	b921      	cbnz	r1, 80037a8 <_realloc_r+0x14>
 800379e:	4611      	mov	r1, r2
 80037a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037a4:	f7ff bf9c 	b.w	80036e0 <_malloc_r>
 80037a8:	b922      	cbnz	r2, 80037b4 <_realloc_r+0x20>
 80037aa:	f7ff ff4d 	bl	8003648 <_free_r>
 80037ae:	4625      	mov	r5, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037b4:	f000 f830 	bl	8003818 <_malloc_usable_size_r>
 80037b8:	42a0      	cmp	r0, r4
 80037ba:	d20f      	bcs.n	80037dc <_realloc_r+0x48>
 80037bc:	4621      	mov	r1, r4
 80037be:	4638      	mov	r0, r7
 80037c0:	f7ff ff8e 	bl	80036e0 <_malloc_r>
 80037c4:	4605      	mov	r5, r0
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d0f2      	beq.n	80037b0 <_realloc_r+0x1c>
 80037ca:	4631      	mov	r1, r6
 80037cc:	4622      	mov	r2, r4
 80037ce:	f7ff ff13 	bl	80035f8 <memcpy>
 80037d2:	4631      	mov	r1, r6
 80037d4:	4638      	mov	r0, r7
 80037d6:	f7ff ff37 	bl	8003648 <_free_r>
 80037da:	e7e9      	b.n	80037b0 <_realloc_r+0x1c>
 80037dc:	4635      	mov	r5, r6
 80037de:	e7e7      	b.n	80037b0 <_realloc_r+0x1c>

080037e0 <_sbrk_r>:
 80037e0:	b538      	push	{r3, r4, r5, lr}
 80037e2:	2300      	movs	r3, #0
 80037e4:	4d05      	ldr	r5, [pc, #20]	; (80037fc <_sbrk_r+0x1c>)
 80037e6:	4604      	mov	r4, r0
 80037e8:	4608      	mov	r0, r1
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	f7fd fa7c 	bl	8000ce8 <_sbrk>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d102      	bne.n	80037fa <_sbrk_r+0x1a>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	b103      	cbz	r3, 80037fa <_sbrk_r+0x1a>
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	bd38      	pop	{r3, r4, r5, pc}
 80037fc:	200001e8 	.word	0x200001e8

08003800 <__malloc_lock>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__malloc_lock+0x8>)
 8003802:	f000 b811 	b.w	8003828 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	200001f0 	.word	0x200001f0

0800380c <__malloc_unlock>:
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <__malloc_unlock+0x8>)
 800380e:	f000 b80c 	b.w	800382a <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	200001f0 	.word	0x200001f0

08003818 <_malloc_usable_size_r>:
 8003818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800381c:	1f18      	subs	r0, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	bfbc      	itt	lt
 8003822:	580b      	ldrlt	r3, [r1, r0]
 8003824:	18c0      	addlt	r0, r0, r3
 8003826:	4770      	bx	lr

08003828 <__retarget_lock_acquire_recursive>:
 8003828:	4770      	bx	lr

0800382a <__retarget_lock_release_recursive>:
 800382a:	4770      	bx	lr

0800382c <_init>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr

08003838 <_fini>:
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	bf00      	nop
 800383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383e:	bc08      	pop	{r3}
 8003840:	469e      	mov	lr, r3
 8003842:	4770      	bx	lr
